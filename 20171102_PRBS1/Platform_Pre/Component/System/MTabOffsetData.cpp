/* Generated by Together */

#include "stdafx.h"
#include "common.h"
#include "MPreBonderData.h"
#include "MTabOffsetData.h"
#include "MyProgressWnd.h"

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif

MTabOffsetData::MTabOffsetData()
{
	initialize();
}

MTabOffsetData::MTabOffsetData(CString strFileName) : MFileManager(strFileName)
{
	initialize();
}

MTabOffsetData::MTabOffsetData(CString strFileName, CString strPath): MFileManager(strFileName, strPath)
{
	initialize();
}

void MTabOffsetData::initialize()
{
	for (int i = 0; i < DEF_MAX_TAB_XU; i++)
	{
		m_rgdXuTabOffsetTabMounter[i] = 0.0;
		m_rgdXuTabOffsetTabAligner[i] = 0.0;
		m_rgdXuTabOffsetTabAlignerT[i] = 0.0;
	}
	for (int i = 0; i < DEF_MAX_TAB_XD; i++)
	{
		m_rgdXdTabOffsetTabMounter[i] = 0.0;
		m_rgdXdTabOffsetTabAligner[i] = 0.0;
		m_rgdXdTabOffsetTabAlignerT[i] = 0.0;
	}
	for (int i = 0; i < DEF_MAX_TAB_YL; i++)
	{
		m_rgdYlTabOffsetTabMounter[i] = 0.0;
		m_rgdYlTabOffsetTabAligner[i] = 0.0;
		m_rgdYlTabOffsetTabAlignerT[i] = 0.0;
	}
	for (int i = 0; i < DEF_MAX_TAB_YR; i++)
	{
		m_rgdYrTabOffsetTabMounter[i] = 0.0;
		m_rgdYrTabOffsetTabAligner[i] = 0.0;
		m_rgdYrTabOffsetTabAlignerT[i] = 0.0;
	}
}

MTabOffsetData::~MTabOffsetData()
{
}

int MTabOffsetData::ReadData()
{
	BOOL	bReturn = TRUE;
	CString	strSection = "TabOffset Data";
	CString	szBuff;
	CString	strItem;

	//CMyProgressWnd ProgWnd(NULL, _T("TabOffset Data File Loading..."));
#ifdef DEF_SOURCE_SYSTEM
	//ProgWnd.SetRange(0, (DEF_MAX_TAB_XU + DEF_MAX_TAB_XD) * 2);
#endif
#ifdef DEF_GATE_SYSTEM
	//ProgWnd.SetRange(0, (DEF_MAX_TAB_YL + DEF_MAX_TAB_YR) * 2);
#endif
	//ProgWnd.SetText(_T("Operation is in progress.\n")
//					_T("Wait a moment."));
	//ProgWnd.PeekAndPump();

#ifdef DEF_SOURCE_SYSTEM
	for (int i = 0; i < DEF_MAX_TAB_XU; i++)
	{
		strItem.Format(_T("XuTabOffset[%d]_TabMounter"), i);
		if (!GetValue(strSection, strItem, &m_rgdXuTabOffsetTabMounter[i]))
			DISPLAY_READ_ERROR(strSection, strItem, bReturn);

		//ProgWnd.StepIt();

		strItem.Format(_T("XuTabOffset[%d]_TabAligner"), i);
		if (!GetValue(strSection, strItem, &m_rgdXuTabOffsetTabAligner[i]))
			DISPLAY_READ_ERROR(strSection, strItem, bReturn);

		strItem.Format(_T("XuTabOffset[%d]_TabAlignerT"), i);
		if (!GetValue(strSection, strItem, &m_rgdXuTabOffsetTabAlignerT[i]))
			DISPLAY_READ_ERROR(strSection, strItem, bReturn);

		//ProgWnd.StepIt();
	} 
	for (int i = 0; i < DEF_MAX_TAB_XD; i++)
	{
		strItem.Format(_T("XdTabOffset[%d]_TabMounter"), i);
		if (!GetValue(strSection, strItem, &m_rgdXdTabOffsetTabMounter[i]))
			DISPLAY_READ_ERROR(strSection, strItem, bReturn);

		//ProgWnd.StepIt();

		strItem.Format(_T("XdTabOffset[%d]_TabAligner"), i);
		if (!GetValue(strSection, strItem, &m_rgdXdTabOffsetTabAligner[i]))
			DISPLAY_READ_ERROR(strSection, strItem, bReturn);

		strItem.Format(_T("XdTabOffset[%d]_TabAlignerT"), i);
		if (!GetValue(strSection, strItem, &m_rgdXdTabOffsetTabAlignerT[i]))
			DISPLAY_READ_ERROR(strSection, strItem, bReturn);
		//ProgWnd.StepIt();
	} 
#endif

#ifdef DEF_GATE_SYSTEM
	for (int i = 0; i < DEF_MAX_TAB_YL; i++)
	{
		strItem.Format(_T("YlTabOffset[%d]_TabMounter"), i);
		if (!GetValue(strSection, strItem, &m_rgdYlTabOffsetTabMounter[i]))
			DISPLAY_READ_ERROR(strSection, strItem, bReturn);

		//ProgWnd.StepIt();

		strItem.Format(_T("YlTabOffset[%d]_TabAligner"), i);
		if (!GetValue(strSection, strItem, &m_rgdYlTabOffsetTabAligner[i]))
			DISPLAY_READ_ERROR(strSection, strItem, bReturn);

		strItem.Format(_T("YlTabOffset[%d]_TabAlignerT"), i);
		if (!GetValue(strSection, strItem, &m_rgdYlTabOffsetTabAlignerT[i]))
			DISPLAY_READ_ERROR(strSection, strItem, bReturn);
		//ProgWnd.StepIt();
	} 
	for (int i = 0; i < DEF_MAX_TAB_YR; i++)
	{
		strItem.Format(_T("YrTabOffset[%d]_TabMounter"), i);
		if (!GetValue(strSection, strItem, &m_rgdYrTabOffsetTabMounter[i]))
			DISPLAY_READ_ERROR(strSection, strItem, bReturn);

		//ProgWnd.StepIt();

		strItem.Format(_T("YrTabOffset[%d]_TabAligner"), i);
		if (!GetValue(strSection, strItem, &m_rgdYrTabOffsetTabAligner[i]))
			DISPLAY_READ_ERROR(strSection, strItem, bReturn);

		strItem.Format(_T("YrTabOffset[%d]_TabAlignerT"), i);
		if (!GetValue(strSection, strItem, &m_rgdYrTabOffsetTabAlignerT[i]))
			DISPLAY_READ_ERROR(strSection, strItem, bReturn);

		//ProgWnd.StepIt();
	}
#endif
	return bReturn;   
}

int MTabOffsetData::WriteData()
{
	if (!MakeBackUpFile())
	{
		//Back Up File을 만드는데 실패 했습니다. 계속 진행 하겠습니까?
		if (MyMessageBox(MY_MESSAGE_BOX,10000, _T("File Write Error"), M_ICONERROR|M_YESNO) == IDNO) 
			return FALSE;
	}

	BOOL bReturn = TRUE;
	CString strSection = "TabOffset Data";
	CString strItem;

//	CMyProgressWnd ProgWnd(NULL, _T("TabOffset Data File Saving..."));
	//ProgWnd.SetRange(0, (DEF_MAX_TAB_XU + DEF_MAX_TAB_XD + DEF_MAX_TAB_YL + DEF_MAX_TAB_YR) * 2);
	//ProgWnd.SetText(_T("Operation is in progress.\n")
//					_T("Wait a moment."));
	//ProgWnd.PeekAndPump();

	for (int i = 0; i < DEF_MAX_TAB_XU; i++)
	{
		strItem.Format(_T("XuTabOffset[%d]_TabMounter"), i);
		if (!SetValue(strSection, strItem, m_rgdXuTabOffsetTabMounter[i]))
			DISPLAY_WRITE_ERROR(strSection, strItem, bReturn);

		//ProgWnd.StepIt();

		strItem.Format(_T("XuTabOffset[%d]_TabAligner"), i);
		if (!SetValue(strSection, strItem, m_rgdXuTabOffsetTabAligner[i]))
			DISPLAY_WRITE_ERROR(strSection, strItem, bReturn);

		strItem.Format(_T("XuTabOffset[%d]_TabAlignerT"), i);
		if (!SetValue(strSection, strItem, m_rgdXuTabOffsetTabAlignerT[i]))
			DISPLAY_WRITE_ERROR(strSection, strItem, bReturn);
		//ProgWnd.StepIt();
	}
	for (int i = 0; i < DEF_MAX_TAB_XD; i++)
	{
		strItem.Format(_T("XdTabOffset[%d]_TabMounter"), i);
		if (!SetValue(strSection, strItem, m_rgdXdTabOffsetTabMounter[i]))
			DISPLAY_WRITE_ERROR(strSection, strItem, bReturn);

		//ProgWnd.StepIt();

		strItem.Format(_T("XdTabOffset[%d]_TabAligner"), i);
		if (!SetValue(strSection, strItem, m_rgdXdTabOffsetTabAligner[i]))
			DISPLAY_WRITE_ERROR(strSection, strItem, bReturn);

		strItem.Format(_T("XdTabOffset[%d]_TabAlignerT"), i);
		if (!SetValue(strSection, strItem, m_rgdXdTabOffsetTabAlignerT[i]))
			DISPLAY_WRITE_ERROR(strSection, strItem, bReturn);
		//ProgWnd.StepIt();
	}
	for (int i = 0; i < DEF_MAX_TAB_YL; i++)
	{
		strItem.Format(_T("YlTabOffset[%d]_TabMounter"), i);
		if (!SetValue(strSection, strItem, m_rgdYlTabOffsetTabMounter[i]))
			DISPLAY_WRITE_ERROR(strSection, strItem, bReturn);

		//ProgWnd.StepIt();

		strItem.Format(_T("YlTabOffset[%d]_TabAligner"), i);
		if (!SetValue(strSection, strItem, m_rgdYlTabOffsetTabAligner[i]))
			DISPLAY_WRITE_ERROR(strSection, strItem, bReturn);

		strItem.Format(_T("YlTabOffset[%d]_TabAlignerT"), i);
		if (!SetValue(strSection, strItem, m_rgdYlTabOffsetTabAlignerT[i]))
			DISPLAY_WRITE_ERROR(strSection, strItem, bReturn);
		//ProgWnd.StepIt();
	}
	for (int i = 0; i < DEF_MAX_TAB_YR; i++)
	{
		strItem.Format(_T("YrTabOffset[%d]_TabMounter"), i);
		if (!SetValue(strSection, strItem, m_rgdYrTabOffsetTabMounter[i]))
			DISPLAY_WRITE_ERROR(strSection, strItem, bReturn);

		//ProgWnd.StepIt();

		strItem.Format(_T("YrTabOffset[%d]_TabAligner"), i);
		if (!SetValue(strSection, strItem, m_rgdYrTabOffsetTabAligner[i]))
			DISPLAY_WRITE_ERROR(strSection, strItem, bReturn);

		strItem.Format(_T("YrTabOffset[%d]_TabAlignerT"), i);
		if (!SetValue(strSection, strItem, m_rgdYrTabOffsetTabAlignerT[i]))
			DISPLAY_WRITE_ERROR(strSection, strItem, bReturn);
		//ProgWnd.StepIt();
	}
	return TRUE;
}

double MTabOffsetData::GetTabOffsetMounter(EWorkingSide eWorkSide, int iTabNo)
{
	switch (eWorkSide)
	{
	case WORKING_SIDE_X_UP:
		return m_rgdXuTabOffsetTabMounter[iTabNo];

	case WORKING_SIDE_X_DOWN:
		return m_rgdXdTabOffsetTabMounter[iTabNo];

	case WORKING_SIDE_Y_LEFT:
		return m_rgdYlTabOffsetTabMounter[iTabNo];
		
	case WORKING_SIDE_Y_RIGHT:
		return m_rgdYrTabOffsetTabMounter[iTabNo];
	}
	
	return 0.0;
}

double MTabOffsetData::GetTabOffsetAligner(EWorkingSide eWorkSide, int iTabNo)
{
	switch (eWorkSide)
	{
	case WORKING_SIDE_X_UP:
		return m_rgdXuTabOffsetTabAligner[iTabNo];
		
	case WORKING_SIDE_X_DOWN:
		return m_rgdXdTabOffsetTabAligner[iTabNo];
		
	case WORKING_SIDE_Y_LEFT:
		return m_rgdYlTabOffsetTabAligner[iTabNo];
		
	case WORKING_SIDE_Y_RIGHT:
		return m_rgdYrTabOffsetTabAligner[iTabNo];
	}
	
	return 0.0;
}

double MTabOffsetData::GetTabOffsetAlignerT(EWorkingSide eWorkSide, int iTabNo)
{
	switch (eWorkSide)
	{
	case WORKING_SIDE_X_UP:
		return m_rgdXuTabOffsetTabAlignerT[iTabNo];
		
	case WORKING_SIDE_X_DOWN:
		return m_rgdXdTabOffsetTabAlignerT[iTabNo];
		
	case WORKING_SIDE_Y_LEFT:
		return m_rgdYlTabOffsetTabAlignerT[iTabNo];
		
	case WORKING_SIDE_Y_RIGHT:
		return m_rgdYrTabOffsetTabAlignerT[iTabNo];
	}
	
	return 0.0;
}

/* End Of Code */

