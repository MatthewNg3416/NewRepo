/* Generated by Together */
#include "stdafx.h"
#include "MPreBonderData.h"
#include "MyProgressWnd.h"
#include "common.h"

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif

MPreBonderData::MPreBonderData()
{
	initialize();
}

MPreBonderData::MPreBonderData(CString strFileName) : MFileManager(strFileName)
{
	initialize();
}

MPreBonderData::MPreBonderData(CString strFileName, CString strPath)
	: MFileManager(strFileName, strPath)
{
	initialize();
}

void MPreBonderData::initialize()
{
	int i = 0;
	m_dLead_Width_Xtab = 0.0;
	m_dLead_Width_Ytab = 0.0;
	m_uiTab_Pitch_Count_Xtab = 0;
	m_uiTab_Pitch_Count_Ytab = 0;
	m_uiSprocket_Pitch_Count_Xtab = 0;
	m_uiSprocket_Pitch_Count_Xtab_Second = 0; //SJ_YYK 150213 Add..
	m_uiSprocket_Pitch_Count_Ytab = 0;
	m_uiSprocket_Pitch_Count_Ytab_Second = 0; //SJ_YYK 150213 Add..
	m_uiBad_Tab_Count_Xtab = 0;
	m_uiBad_Tab_Count_Ytab = 0;

	m_dDistTabEgdeToMark_Xtab = 0.0;
	m_dDistTabEgdeToMark_Ytab = 0.0;

	/*/
	//sj_ysb
	m_uiPermissionXLeftValue13 = 0.0;
	m_uiPermissionXRightValue13 = 0.0;
	m_uiPermissionXLeftValue24 = 0.0;
	m_uiPermissionXRightValue24 = 0.0;
	/*/
	m_dToleranceSRLine = 0.0;
	m_dToleranceTabEnd = 0.0;
	m_dNoCareValueTabEnd = 0.0;

	//20121004 SJ_HJG È¾Àü°³
	//20120828 sj_ysb
	m_dSRLineMarkDistance = 0.0;
	m_dTabEndMarkDistance = 0.0;
	m_bMarkDistanceFunc = FALSE;
	m_bSRLineAlignFunc = FALSE;
	//________________
	for (int i = 0; i < DEF_MAX_GROUP; i++)
		m_rgiNumberOfUsingSensorForWorker[i] = 1;

	m_uiAutoChange_Move_Tab_Count_Xtab = 0;

	m_dSprocket2_F_User_AutoHoming_Offset = 0.0;
	m_dSprocket2_R_User_AutoHoming_Offset = 0.0;

	//120329.kms________
	m_dSprocket1_F_AutoHoming_Offset = 0.0;
	m_dSprocket1_R_AutoHoming_Offset = 0.0;
	m_dSprocket2_F_AutoHoming_Offset = 0.0;
	m_dSprocket2_R_AutoHoming_Offset = 0.0;
	//__________________

	for (int i = 0; i < DEF_MAX_LIGHTING; i++)
	{
		m_rgiLightingValue[i] = 0;
	}

	for (int i = 0; i < DEF_MAX_CONVEYOR; i++)
	{
		m_rgdConveyorNormalSpeed[i] = 0.0;
		m_rgdConveyorReducedSpeed[i] = 0.0;
		m_rgdConveyorTransferSpeed[i] = 0.0;
	}
	
	//2009.08.14 CYJ
	m_dLength_between_ChipCenter_and_TabEnd = 0.0;

	m_bUseTabPanelAlign = FALSE;

//@	m_dInspectionMarkXPermission = 0.0;
//@	m_dInspectionMarkYPermission = 0.0;
}

MPreBonderData::~MPreBonderData()
{
}

BOOL MPreBonderData::ReadData()
{
	BOOL	bReturn = TRUE;
	CString	szBuff;
	CString	strItem;
	CString	strSection = "PreBonder Data";	// Section¸í ¼³Á¤
	CString	strTemp;

	/** X Tab Feature */

	if (!GetValue(strSection, "Lead_Width_Xtab", &m_dLead_Width_Xtab))
		DISPLAY_READ_ERROR(strSection, "Lead_Width_Xtab", bReturn);
	
	if (!GetValue(strSection, "Tab_Pitch_Count_Xtab", &m_uiTab_Pitch_Count_Xtab))
		DISPLAY_READ_ERROR(strSection, "Tab_Pitch_Count_Xtab", bReturn);

	if (!GetValue(strSection, "Sprocket_Pitch_Count_Xtab", &m_uiSprocket_Pitch_Count_Xtab))
		DISPLAY_READ_ERROR(strSection, "Sprocket_Pitch_Count_Xtab", bReturn);

	//SJ_YYK 150213 Add..
	if (!GetValue(strSection, "Sprocket_Pitch_Count_Xtab_Second", &m_uiSprocket_Pitch_Count_Xtab_Second))
		DISPLAY_READ_ERROR(strSection, "Sprocket_Pitch_Count_Xtab_Second", bReturn);

	if (!GetValue(strSection, "Bad_Tab_Count_Xtab", &m_uiBad_Tab_Count_Xtab))
		DISPLAY_READ_ERROR(strSection, "Bad_Tab_Count_Xtab", bReturn);

	if (!GetValue(strSection, "AutoChange_Move_Tab_Count_Xtab", &m_uiAutoChange_Move_Tab_Count_Xtab))
		DISPLAY_READ_ERROR(strSection, "AutoChange_Move_Tab_Count_Xtab", bReturn);

	if (!GetValue(strSection, "NumberOfUsingSensorForWorker1", &m_rgiNumberOfUsingSensorForWorker[0]))
		DISPLAY_READ_ERROR(strSection, "NumberOfUsingSensorForWorker1", bReturn);

	/** Y Tab Feature */

	if (!GetValue(strSection, "Lead_Width_Ytab", &m_dLead_Width_Ytab))
		DISPLAY_READ_ERROR(strSection, "Lead_Width_Ytab", bReturn);

	if (!GetValue(strSection, "Tab_Pitch_Count_Ytab", &m_uiTab_Pitch_Count_Ytab))
		DISPLAY_READ_ERROR(strSection, "Tab_Pitch_Count_Ytab", bReturn);

	if (!GetValue(strSection, "Sprocket_Pitch_Count_Ytab", &m_uiSprocket_Pitch_Count_Ytab))
		DISPLAY_READ_ERROR(strSection, "Sprocket_Pitch_Count_Ytab", bReturn);

	//SJ_YYK 150213 Add..
	if (!GetValue(strSection, "Sprocket_Pitch_Count_Ytab_Second", &m_uiSprocket_Pitch_Count_Ytab_Second))
		DISPLAY_READ_ERROR(strSection, "Sprocket_Pitch_Count_Ytab_Second", bReturn);

	if (!GetValue(strSection, "Bad_Tab_Count_Ytab", &m_uiBad_Tab_Count_Ytab))
		DISPLAY_READ_ERROR(strSection, "Bad_Tab_Count_Ytab", bReturn);

	if (!GetValue(strSection, "DistTabEgdeToMark_Xtab", &m_dDistTabEgdeToMark_Xtab))
		DISPLAY_READ_ERROR(strSection, "DistTabEgdeToMark_Xtab", bReturn);

	if (!GetValue(strSection, "DistTabEgdeToMark_Ytab", &m_dDistTabEgdeToMark_Ytab))
		DISPLAY_READ_ERROR(strSection, "DistTabEgdeToMark_Ytab", bReturn);

#ifndef DEF_SOURCE_SYSTEM
	if (!GetValue(strSection, "NumberOfUsingSensorForWorker2", &m_rgiNumberOfUsingSensorForWorker[1]))
		DISPLAY_READ_ERROR(strSection, "NumberOfUsingSensorForWorker2", bReturn);
#endif

	/** AutoHoming Offset */
	if (!GetValue(strSection, "Sprocket2_F_User_AutoHoming_Offset", &m_dSprocket2_F_User_AutoHoming_Offset))
		DISPLAY_READ_ERROR(strSection, "Sprocket2_F_User_AutoHoming_Offset", bReturn);

	if (!GetValue(strSection, "Sprocket2_R_User_AutoHoming_Offset", &m_dSprocket2_R_User_AutoHoming_Offset))
		DISPLAY_READ_ERROR(strSection, "Sprocket2_R_User_AutoHoming_Offset", bReturn);

	//120329.kms__________
	if (!GetValue(strSection,_T("Sprocket1_F_AutoHoming_Offset"), &m_dSprocket1_F_AutoHoming_Offset))
		DISPLAY_READ_ERROR(strSection,_T("Sprocket1_F_AutoHoming_Offset"), bReturn);

	if (!GetValue(strSection,_T("Sprocket1_R_AutoHoming_Offset"), &m_dSprocket1_R_AutoHoming_Offset))
		DISPLAY_READ_ERROR(strSection,_T("Sprocket1_R_AutoHoming_Offset"), bReturn);

  	if (!GetValue(strSection,_T("Sprocket2_F_AutoHoming_Offset"), &m_dSprocket2_F_AutoHoming_Offset))
		DISPLAY_READ_ERROR(strSection,_T("Sprocket2_F_AutoHoming_Offset"), bReturn);

	if (!GetValue(strSection,_T("Sprocket2_R_AutoHoming_Offset"), &m_dSprocket2_R_AutoHoming_Offset))
		DISPLAY_READ_ERROR(strSection,_T("Sprocket2_R_AutoHoming_Offset"), bReturn);
	//____________________

	if (!GetValue(strSection, "UseTCP", &strTemp))
		DISPLAY_READ_ERROR(strSection, "UseTCP", bReturn);
	else
	{
		if (strTemp.Compare(_T("COF")) == 0)
			m_bUseTCP = FALSE;
		else
			m_bUseTCP = TRUE;
	}
	//20121004 SJ_HJG È¾Àü°³
	//20120828 sj_ysb
	if (!GetValue(strSection, "MarkDistanceFunc", &strTemp))
		DISPLAY_READ_ERROR(strSection, "MarkDistanceFunc", bReturn);
	else
	{
		if (strTemp.Compare(_T("FALSE")) == 0)
			m_bMarkDistanceFunc = FALSE;
		else
			m_bMarkDistanceFunc = TRUE;
	}

	if (!GetValue(strSection, "SRLineAlignFunc", &strTemp))
		DISPLAY_READ_ERROR(strSection, "SRLineAlignFunc", bReturn);
	else
	{
		if (strTemp.Compare(_T("FALSE")) == 0)
			m_bSRLineAlignFunc = FALSE;
		else
			m_bSRLineAlignFunc = TRUE;
	}
	//____________________

	/** Lighting Data */
	for (int i = 0; i < DEF_MAX_LIGHTING; i++)
	{
		strItem.Format(_T("Lighting%d"), i + 1);
		if (!GetValue(strSection, strItem, &m_rgiLightingValue[i]))
			DISPLAY_READ_ERROR(strSection, strItem, bReturn);
	}

	/** Roller Conveyor Speed Data */
	for (int i = 0; i < DEF_MAX_CONVEYOR; i++)
	{
		strItem.Format(_T("RollerConveyorNormalSpeed%d"), i + 1);
		if (!GetValue(strSection, strItem, &m_rgdConveyorNormalSpeed[i]))
			DISPLAY_READ_ERROR(strSection, strItem, bReturn);

		strItem.Format(_T("RollerConveyorReducedSpeed%d"), i + 1);
		if (!GetValue(strSection, strItem, &m_rgdConveyorReducedSpeed[i]))
			DISPLAY_READ_ERROR(strSection, strItem, bReturn);

		strItem.Format(_T("RollerConveyorTransferSpeed%d"), i + 1);
		if (!GetValue(strSection, strItem, &m_rgdConveyorTransferSpeed[i]))
			DISPLAY_READ_ERROR(strSection, strItem, bReturn);
	}

	/*/
	// 20090620 sj_ysb
	if (!GetValue(strSection, "PermissionXLeftValue13", &m_uiPermissionXLeftValue13))
		DISPLAY_READ_ERROR(strSection, "PermissionXLeftValue13", bReturn);

	if (!GetValue(strSection, "PermissionXRightValue13", &m_uiPermissionXRightValue13))
		DISPLAY_READ_ERROR(strSection, "PermissionXRightValue13", bReturn);

	if (!GetValue(strSection, "PermissionXLeftValue24", &m_uiPermissionXLeftValue24))
		DISPLAY_READ_ERROR(strSection, "PermissionXLeftValue24", bReturn);

	if (!GetValue(strSection, "PermissionXRightValue24", &m_uiPermissionXRightValue24))
		DISPLAY_READ_ERROR(strSection, "PermissionXRightValue24", bReturn);
	/*/
	if (!GetValue(strSection, "ToleranceSRLine", &m_dToleranceSRLine))
		DISPLAY_READ_ERROR(strSection, "ToleranceSRLine", bReturn);
	if (!GetValue(strSection, "ToleranceTabEnd", &m_dToleranceTabEnd))
		DISPLAY_READ_ERROR(strSection, "ToleranceTabEnd", bReturn);
	if (!GetValue(strSection, "NoCareValueTabEnd", &m_dNoCareValueTabEnd))
		DISPLAY_READ_ERROR(strSection, "NoCareValueTabEnd", bReturn);


	//20121004 SJ_HJG È¾Àü°³
	if (!GetValue(strSection, "SRLineMarkDistance", &m_dSRLineMarkDistance))
		DISPLAY_READ_ERROR(strSection, "SRLineMarkDistance", bReturn);

	if (!GetValue(strSection, "TabEndMarkDistance", &m_dTabEndMarkDistance))
		DISPLAY_READ_ERROR(strSection, "TabEndMarkDistance", bReturn);
	//_____________
	//2009.08.14 CYJ
	if (!GetValue(strSection, "Length_between_ChipCenter_and_TabEnd", &m_dLength_between_ChipCenter_and_TabEnd))
		DISPLAY_READ_ERROR(strSection, "Length_between_ChipCenter_and_TabEnd", bReturn);

	if (!GetValue(strSection, "UseTabPanelAlign", &strTemp))
		DISPLAY_READ_ERROR(strSection, "UseTabPanelAlign", bReturn);
	else
	{
		if (strTemp.Compare(_T("FALSE")) == 0)
			m_bUseTabPanelAlign = FALSE;
		else
			m_bUseTabPanelAlign = TRUE;
	}

/*
	if (!GetValue(strSection, "InspectionMarkXPermission", &m_dInspectionMarkXPermission))
	{
		m_dInspectionMarkXPermission = 0.05;
		DISPLAY_READ_ERROR(strSection, "InspectionMarkXPermission", bReturn);
	}

	if (!GetValue(strSection, "InspectionMarkYPermission", &m_dInspectionMarkYPermission))
	{
		m_dInspectionMarkYPermission = 0.1;
		DISPLAY_READ_ERROR(strSection, "InspectionMarkYPermission", bReturn);
	}
*/
	return bReturn;
}

BOOL MPreBonderData::WriteData()
{
	if (!MakeBackUpFile())
	{
		//Back Up FileÀ» ¸¸µå´Âµ¥ ½ÇÆÐ Çß½À´Ï´Ù. °è¼Ó ÁøÇà ÇÏ°Ú½À´Ï±î?
		if (MyMessageBox(MY_MESSAGE_BOX,10000, _T("File Write Error"), M_ICONERROR|M_YESNO) == IDNO) 
			return FALSE;
	}

	BOOL bReturn = TRUE;
	CString strItem;
	CString strSection = "PreBonder Data";	// Section¸í ¼³Á¤

	/** X Tab Feature */

	if (!SetValue(strSection, "Lead_Width_Xtab", m_dLead_Width_Xtab))
		DISPLAY_WRITE_ERROR(strSection, "Lead_Width_Xtab", bReturn);

	if (!SetValue(strSection, "Tab_Pitch_Count_Xtab", m_uiTab_Pitch_Count_Xtab))
		DISPLAY_WRITE_ERROR(strSection, "Tab_Pitch_Count_Xtab", bReturn);

	if (!SetValue(strSection, "Sprocket_Pitch_Count_Xtab", m_uiSprocket_Pitch_Count_Xtab))
		DISPLAY_WRITE_ERROR(strSection, "Sprocket_Pitch_Count_Xtab", bReturn);

	//SJ_YYK 150213 Add.
	if (!SetValue(strSection, "Sprocket_Pitch_Count_Xtab_Second", m_uiSprocket_Pitch_Count_Xtab_Second))
		DISPLAY_WRITE_ERROR(strSection, "Sprocket_Pitch_Count_Xtab_Second", bReturn);

	if (!SetValue(strSection, "Bad_Tab_Count_Xtab", m_uiBad_Tab_Count_Xtab))
		DISPLAY_WRITE_ERROR(strSection, "Bad_Tab_Count_Xtab", bReturn);

	if (!SetValue(strSection, "AutoChange_Move_Tab_Count_Xtab", m_uiAutoChange_Move_Tab_Count_Xtab))
		DISPLAY_WRITE_ERROR(strSection, "AutoChange_Move_Tab_Count_Xtab", bReturn);

	if (!SetValue(strSection, "NumberOfUsingSensorForWorker1", m_rgiNumberOfUsingSensorForWorker[0]))
		DISPLAY_WRITE_ERROR(strSection, "NumberOfUsingSensorForWorker1", bReturn);

	/** Y Tab Feature */

	if (!SetValue(strSection, "Lead_Width_Ytab", m_dLead_Width_Ytab))
		DISPLAY_WRITE_ERROR(strSection, "Lead_Width_Ytab", bReturn);

	if (!SetValue(strSection, "Tab_Pitch_Count_Ytab", m_uiTab_Pitch_Count_Ytab))
		DISPLAY_WRITE_ERROR(strSection, "Tab_Pitch_Count_Ytab", bReturn);

	if (!SetValue(strSection, "Sprocket_Pitch_Count_Ytab", m_uiSprocket_Pitch_Count_Ytab))
		DISPLAY_WRITE_ERROR(strSection, "Sprocket_Pitch_Count_Ytab", bReturn);

	//SJ_YYK 150213 Add...
	if (!SetValue(strSection, "Sprocket_Pitch_Count_Ytab_Second", m_uiSprocket_Pitch_Count_Ytab_Second))
		DISPLAY_WRITE_ERROR(strSection, "Sprocket_Pitch_Count_Ytab_Second", bReturn);

	if (!SetValue(strSection, "Bad_Tab_Count_Ytab", m_uiBad_Tab_Count_Ytab))
		DISPLAY_WRITE_ERROR(strSection, "Bad_Tab_Count_Ytab", bReturn);

	if (!SetValue(strSection, "DistTabEgdeToMark_Xtab", m_dDistTabEgdeToMark_Xtab))
		DISPLAY_WRITE_ERROR(strSection, "DistTabEgdeToMark_Xtab", bReturn);

	if (!SetValue(strSection, "DistTabEgdeToMark_Ytab", m_dDistTabEgdeToMark_Ytab))
		DISPLAY_WRITE_ERROR(strSection, "DistTabEgdeToMark_Ytab", bReturn);

	if (!SetValue(strSection, "NumberOfUsingSensorForWorker2", m_rgiNumberOfUsingSensorForWorker[1]))
		DISPLAY_WRITE_ERROR(strSection, "NumberOfUsingSensorForWorker2", bReturn);

	/** AutoHoming Offset */
	if (!SetValue(strSection, "Sprocket2_F_User_AutoHoming_Offset", m_dSprocket2_F_User_AutoHoming_Offset))
		DISPLAY_WRITE_ERROR(strSection, "Sprocket2_F_User_AutoHoming_Offset", bReturn);

	if (!SetValue(strSection, "Sprocket2_R_User_AutoHoming_Offset", m_dSprocket2_R_User_AutoHoming_Offset))
		DISPLAY_WRITE_ERROR(strSection, "Sprocket2_R_User_AutoHoming_Offset", bReturn);

	//120329.kms________
	if (!SetValue(strSection,_T("Sprocket1_F_AutoHoming_Offset"), m_dSprocket1_F_AutoHoming_Offset))
		DISPLAY_WRITE_ERROR(strSection,_T("Sprocket1_F_AutoHoming_Offset"), bReturn);

	if (!SetValue(strSection,_T("Sprocket1_R_AutoHoming_Offset"), m_dSprocket1_R_AutoHoming_Offset))
		DISPLAY_WRITE_ERROR(strSection,_T("Sprocket1_R_AutoHoming_Offset"), bReturn);

	if (!SetValue(strSection,_T("Sprocket2_F_AutoHoming_Offset"), m_dSprocket2_F_AutoHoming_Offset))
		DISPLAY_WRITE_ERROR(strSection,_T("Sprocket2_F_AutoHoming_Offset"), bReturn);

	if (!SetValue(strSection,_T("Sprocket2_R_AutoHoming_Offset"), m_dSprocket2_R_AutoHoming_Offset))
		DISPLAY_WRITE_ERROR(strSection,_T("Sprocket2_R_AutoHoming_Offset"), bReturn);
	//__________________

	strItem.Format((m_bUseTCP == TRUE) ? _T("TCP") : _T("COF"));
	if (!SetValue(strSection, "UseTCP", strItem))
		DISPLAY_WRITE_ERROR(strSection, "UseTCP", bReturn);

	//20121004 SJ_HJG È¾Àü°³
	//20120828 sj_ysb
	strItem.Format((m_bMarkDistanceFunc == TRUE) ? _T("TRUE") : _T("FALSE"));
	if (!SetValue(strSection, "MarkDistanceFunc", strItem))
		DISPLAY_WRITE_ERROR(strSection, "MarkDistanceFunc", bReturn);

	strItem.Format((m_bSRLineAlignFunc == TRUE) ? _T("TRUE") : _T("FALSE"));
	if (!SetValue(strSection, "SRLineAlignFunc", strItem))
		DISPLAY_WRITE_ERROR(strSection, "SRLineAlignFunc", bReturn);
	//_____________________
	/** Lighting Data */
	for (int i = 0; i < DEF_MAX_LIGHTING; i++)
	{
		strItem.Format(_T("Lighting%d"), i + 1);
		if (!SetValue(strSection, strItem, m_rgiLightingValue[i]))
			DISPLAY_WRITE_ERROR(strSection, strItem, bReturn);
	}

	/** Roller Conveyor Speed Data */
	for (int i = 0; i < DEF_MAX_CONVEYOR; i++)
	{
		strItem.Format(_T("RollerConveyorNormalSpeed%d"), i + 1);
		if (!SetValue(strSection, strItem, m_rgdConveyorNormalSpeed[i]))
			DISPLAY_WRITE_ERROR(strSection, strItem, bReturn);

		strItem.Format(_T("RollerConveyorReducedSpeed%d"), i + 1);
		if (!SetValue(strSection, strItem, m_rgdConveyorReducedSpeed[i]))
			DISPLAY_WRITE_ERROR(strSection, strItem, bReturn);

		strItem.Format(_T("RollerConveyorTransferSpeed%d"), i + 1);
		if (!SetValue(strSection, strItem, m_rgdConveyorTransferSpeed[i]))
			DISPLAY_WRITE_ERROR(strSection, strItem, bReturn);
	}

	/*/
	//20090620 SJ_YSB
	if (!SetValue(strSection, "PermissionXLeftValue13", m_uiPermissionXLeftValue13))
		DISPLAY_WRITE_ERROR(strSection, "PermissionXLeftValue13", bReturn);

	if (!SetValue(strSection, "PermissionXRightValue13", m_uiPermissionXRightValue13))
		DISPLAY_WRITE_ERROR(strSection, "PermissionXRightValue13", bReturn);

	if (!SetValue(strSection, "PermissionXLeftValue24", m_uiPermissionXLeftValue24))
		DISPLAY_WRITE_ERROR(strSection, "PermissionXLeftValue24", bReturn);

	if (!SetValue(strSection, "PermissionXRightValue24", m_uiPermissionXRightValue24))
		DISPLAY_WRITE_ERROR(strSection, "PermissionXRightValue24", bReturn);
	/*/
	if (!SetValue(strSection, "ToleranceSRLine", m_dToleranceSRLine))
		DISPLAY_WRITE_ERROR(strSection, "ToleranceSRLine", bReturn);
	if (!SetValue(strSection, "ToleranceTabEnd", m_dToleranceTabEnd))
		DISPLAY_WRITE_ERROR(strSection, "ToleranceTabEnd", bReturn);
	if (!SetValue(strSection, "NoCareValueTabEnd", m_dNoCareValueTabEnd))
		DISPLAY_WRITE_ERROR(strSection, "NoCareValueTabEnd", bReturn);

	//20121004 SJ_HJG È¾Àü°³
	if (!SetValue(strSection, "SRLineMarkDistance", m_dSRLineMarkDistance))
		DISPLAY_WRITE_ERROR(strSection, "SRLineMarkDistance", bReturn);

	if (!SetValue(strSection, "TabEndMarkDistance", m_dTabEndMarkDistance))
		DISPLAY_WRITE_ERROR(strSection, "TabEndMarkDistance", bReturn);
	//___________________

	//2009.08.14 CYJ
	if (!SetValue(strSection, "Length_between_ChipCenter_and_TabEnd", m_dLength_between_ChipCenter_and_TabEnd))
		DISPLAY_WRITE_ERROR(strSection, "Length_between_ChipCenter_and_TabEnd", bReturn);

	strItem.Format((m_bUseTabPanelAlign == TRUE) ? _T("TRUE") : _T("FALSE"));
	if (!SetValue(strSection, "UseTabPanelAlign", strItem))
		DISPLAY_WRITE_ERROR(strSection, "UseTabPanelAlign", bReturn);
/*
	if (!SetValue(strSection, "InspectionMarkXPermission", m_dInspectionMarkXPermission))
		DISPLAY_WRITE_ERROR(strSection, "InspectionMarkXPermission", bReturn);

	if (!SetValue(strSection, "InspectionMarkYPermission", m_dInspectionMarkYPermission))
		DISPLAY_WRITE_ERROR(strSection, "InspectionMarkYPermission", bReturn);
*/
	return bReturn;
}
/* End Of Code */
