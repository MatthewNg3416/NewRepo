// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "btnenh.h"

// Dispatch interfaces referenced by this interface
#include "Font.h"
#include "texture.h"

/////////////////////////////////////////////////////////////////////////////
// CBtnEnh

IMPLEMENT_DYNCREATE(CBtnEnh, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CBtnEnh properties

CString CBtnEnh::GetCaption()
{
	CString result;
	GetProperty(DISPID_CAPTION, VT_BSTR, (void*)&result);
	return result;
}

void CBtnEnh::SetCaption(LPCTSTR propVal)
{
	SetProperty(DISPID_CAPTION, VT_BSTR, propVal);
}

long CBtnEnh::GetShape()
{
	long result;
	GetProperty(0xb, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetShape(long propVal)
{
	SetProperty(0xb, VT_I4, propVal);
}

long CBtnEnh::GetSlant()
{
	long result;
	GetProperty(0xd, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetSlant(long propVal)
{
	SetProperty(0xd, VT_I4, propVal);
}

long CBtnEnh::GetSurface()
{
	long result;
	GetProperty(0xe, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetSurface(long propVal)
{
	SetProperty(0xe, VT_I4, propVal);
}

unsigned long CBtnEnh::GetPictureTranspColor()
{
	unsigned long result;
	GetProperty(0xf, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetPictureTranspColor(unsigned long propVal)
{
	SetProperty(0xf, VT_I4, propVal);
}

CString CBtnEnh::GetSoundDown()
{
	CString result;
	GetProperty(0x1, VT_BSTR, (void*)&result);
	return result;
}

void CBtnEnh::SetSoundDown(LPCTSTR propVal)
{
	SetProperty(0x1, VT_BSTR, propVal);
}

CString CBtnEnh::GetSoundUp()
{
	CString result;
	GetProperty(0x2, VT_BSTR, (void*)&result);
	return result;
}

void CBtnEnh::SetSoundUp(LPCTSTR propVal)
{
	SetProperty(0x2, VT_BSTR, propVal);
}

CString CBtnEnh::GetCursor()
{
	CString result;
	GetProperty(0x3, VT_BSTR, (void*)&result);
	return result;
}

void CBtnEnh::SetCursor(LPCTSTR propVal)
{
	SetProperty(0x3, VT_BSTR, propVal);
}

CString CBtnEnh::GetSoundMouseOver()
{
	CString result;
	GetProperty(0x4, VT_BSTR, (void*)&result);
	return result;
}

void CBtnEnh::SetSoundMouseOver(LPCTSTR propVal)
{
	SetProperty(0x4, VT_BSTR, propVal);
}

CString CBtnEnh::GetSoundMouseOut()
{
	CString result;
	GetProperty(0x5, VT_BSTR, (void*)&result);
	return result;
}

void CBtnEnh::SetSoundMouseOut(LPCTSTR propVal)
{
	SetProperty(0x5, VT_BSTR, propVal);
}

COleFont CBtnEnh::GetFontTextLT()
{
	LPDISPATCH pDispatch;
	GetProperty(0x10, VT_DISPATCH, (void*)&pDispatch);
	return COleFont(pDispatch);
}

void CBtnEnh::SetFontTextLT(LPDISPATCH propVal)
{
	SetProperty(0x10, VT_DISPATCH, propVal);
}

COleFont CBtnEnh::GetFontTextCT()
{
	LPDISPATCH pDispatch;
	GetProperty(0x11, VT_DISPATCH, (void*)&pDispatch);
	return COleFont(pDispatch);
}

void CBtnEnh::SetFontTextCT(LPDISPATCH propVal)
{
	SetProperty(0x11, VT_DISPATCH, propVal);
}

COleFont CBtnEnh::GetFontTextRT()
{
	LPDISPATCH pDispatch;
	GetProperty(0x12, VT_DISPATCH, (void*)&pDispatch);
	return COleFont(pDispatch);
}

void CBtnEnh::SetFontTextRT(LPDISPATCH propVal)
{
	SetProperty(0x12, VT_DISPATCH, propVal);
}

COleFont CBtnEnh::GetFontTextLM()
{
	LPDISPATCH pDispatch;
	GetProperty(0x13, VT_DISPATCH, (void*)&pDispatch);
	return COleFont(pDispatch);
}

void CBtnEnh::SetFontTextLM(LPDISPATCH propVal)
{
	SetProperty(0x13, VT_DISPATCH, propVal);
}

COleFont CBtnEnh::GetFontTextRM()
{
	LPDISPATCH pDispatch;
	GetProperty(0x14, VT_DISPATCH, (void*)&pDispatch);
	return COleFont(pDispatch);
}

void CBtnEnh::SetFontTextRM(LPDISPATCH propVal)
{
	SetProperty(0x14, VT_DISPATCH, propVal);
}

COleFont CBtnEnh::GetFontTextLB()
{
	LPDISPATCH pDispatch;
	GetProperty(0x15, VT_DISPATCH, (void*)&pDispatch);
	return COleFont(pDispatch);
}

void CBtnEnh::SetFontTextLB(LPDISPATCH propVal)
{
	SetProperty(0x15, VT_DISPATCH, propVal);
}

COleFont CBtnEnh::GetFontTextCB()
{
	LPDISPATCH pDispatch;
	GetProperty(0x16, VT_DISPATCH, (void*)&pDispatch);
	return COleFont(pDispatch);
}

void CBtnEnh::SetFontTextCB(LPDISPATCH propVal)
{
	SetProperty(0x16, VT_DISPATCH, propVal);
}

COleFont CBtnEnh::GetFontTextRB()
{
	LPDISPATCH pDispatch;
	GetProperty(0x17, VT_DISPATCH, (void*)&pDispatch);
	return COleFont(pDispatch);
}

void CBtnEnh::SetFontTextRB(LPDISPATCH propVal)
{
	SetProperty(0x17, VT_DISPATCH, propVal);
}

CString CBtnEnh::GetPicture()
{
	CString result;
	GetProperty(0x6, VT_BSTR, (void*)&result);
	return result;
}

void CBtnEnh::SetPicture(LPCTSTR propVal)
{
	SetProperty(0x6, VT_BSTR, propVal);
}

CString CBtnEnh::GetPicturePressed()
{
	CString result;
	GetProperty(0x7, VT_BSTR, (void*)&result);
	return result;
}

void CBtnEnh::SetPicturePressed(LPCTSTR propVal)
{
	SetProperty(0x7, VT_BSTR, propVal);
}

CString CBtnEnh::GetPictureMouseOver()
{
	CString result;
	GetProperty(0x8, VT_BSTR, (void*)&result);
	return result;
}

void CBtnEnh::SetPictureMouseOver(LPCTSTR propVal)
{
	SetProperty(0x8, VT_BSTR, propVal);
}

CString CBtnEnh::GetPictureCustom()
{
	CString result;
	GetProperty(0x9, VT_BSTR, (void*)&result);
	return result;
}

void CBtnEnh::SetPictureCustom(LPCTSTR propVal)
{
	SetProperty(0x9, VT_BSTR, propVal);
}

long CBtnEnh::GetPicturePosition()
{
	long result;
	GetProperty(0x18, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetPicturePosition(long propVal)
{
	SetProperty(0x18, VT_I4, propVal);
}

short CBtnEnh::GetPictureXOffset()
{
	short result;
	GetProperty(0x19, VT_I2, (void*)&result);
	return result;
}

void CBtnEnh::SetPictureXOffset(short propVal)
{
	SetProperty(0x19, VT_I2, propVal);
}

short CBtnEnh::GetPictureYOffset()
{
	short result;
	GetProperty(0x1a, VT_I2, (void*)&result);
	return result;
}

void CBtnEnh::SetPictureYOffset(short propVal)
{
	SetProperty(0x1a, VT_I2, propVal);
}

BOOL CBtnEnh::GetEnabled()
{
	BOOL result;
	GetProperty(DISPID_ENABLED, VT_BOOL, (void*)&result);
	return result;
}

void CBtnEnh::SetEnabled(BOOL propVal)
{
	SetProperty(DISPID_ENABLED, VT_BOOL, propVal);
}

long CBtnEnh::GetPictureTranspMode()
{
	long result;
	GetProperty(0x1b, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetPictureTranspMode(long propVal)
{
	SetProperty(0x1b, VT_I4, propVal);
}

BOOL CBtnEnh::GetButtonCustomRaised()
{
	BOOL result;
	GetProperty(0x1c, VT_BOOL, (void*)&result);
	return result;
}

void CBtnEnh::SetButtonCustomRaised(BOOL propVal)
{
	SetProperty(0x1c, VT_BOOL, propVal);
}

unsigned long CBtnEnh::GetBackColorContainer()
{
	unsigned long result;
	GetProperty(0x1d, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetBackColorContainer(unsigned long propVal)
{
	SetProperty(0x1d, VT_I4, propVal);
}

BOOL CBtnEnh::GetMovePictureOnPress()
{
	BOOL result;
	GetProperty(0x1e, VT_BOOL, (void*)&result);
	return result;
}

void CBtnEnh::SetMovePictureOnPress(BOOL propVal)
{
	SetProperty(0x1e, VT_BOOL, propVal);
}

short CBtnEnh::GetButtonRaiseFactor()
{
	short result;
	GetProperty(0x1f, VT_I2, (void*)&result);
	return result;
}

void CBtnEnh::SetButtonRaiseFactor(short propVal)
{
	SetProperty(0x1f, VT_I2, propVal);
}

unsigned long CBtnEnh::GetHighlightColor()
{
	unsigned long result;
	GetProperty(0x20, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetHighlightColor(unsigned long propVal)
{
	SetProperty(0x20, VT_I4, propVal);
}

unsigned long CBtnEnh::GetShadowColor()
{
	unsigned long result;
	GetProperty(0x21, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetShadowColor(unsigned long propVal)
{
	SetProperty(0x21, VT_I4, propVal);
}

BOOL CBtnEnh::GetButtonCustomFitPicture()
{
	BOOL result;
	GetProperty(0x22, VT_BOOL, (void*)&result);
	return result;
}

void CBtnEnh::SetButtonCustomFitPicture(BOOL propVal)
{
	SetProperty(0x22, VT_BOOL, propVal);
}

OLE_HANDLE CBtnEnh::GetHWnd()
{
	OLE_HANDLE result;
	GetProperty(DISPID_HWND, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetHWnd(OLE_HANDLE propVal)
{
	SetProperty(DISPID_HWND, VT_I4, propVal);
}

COleFont CBtnEnh::GetFontTextCaption()
{
	LPDISPATCH pDispatch;
	GetProperty(0x23, VT_DISPATCH, (void*)&pDispatch);
	return COleFont(pDispatch);
}

void CBtnEnh::SetFontTextCaption(LPDISPATCH propVal)
{
	SetProperty(0x23, VT_DISPATCH, propVal);
}

CString CBtnEnh::GetHyperlink()
{
	CString result;
	GetProperty(0x24, VT_BSTR, (void*)&result);
	return result;
}

void CBtnEnh::SetHyperlink(LPCTSTR propVal)
{
	SetProperty(0x24, VT_BSTR, propVal);
}

BOOL CBtnEnh::GetEnableInternetLoadAtDT()
{
	BOOL result;
	GetProperty(0xa, VT_BOOL, (void*)&result);
	return result;
}

void CBtnEnh::SetEnableInternetLoadAtDT(BOOL propVal)
{
	SetProperty(0xa, VT_BOOL, propVal);
}

long CBtnEnh::GetSmoothEdges()
{
	long result;
	GetProperty(0x25, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetSmoothEdges(long propVal)
{
	SetProperty(0x25, VT_I4, propVal);
}

CString CBtnEnh::GetTagEx()
{
	CString result;
	GetProperty(0x26, VT_BSTR, (void*)&result);
	return result;
}

void CBtnEnh::SetTagEx(LPCTSTR propVal)
{
	SetProperty(0x26, VT_BSTR, propVal);
}

BOOL CBtnEnh::GetPictureKeepRatio()
{
	BOOL result;
	GetProperty(0x27, VT_BOOL, (void*)&result);
	return result;
}

void CBtnEnh::SetPictureKeepRatio(BOOL propVal)
{
	SetProperty(0x27, VT_BOOL, propVal);
}

long CBtnEnh::GetFocusMode()
{
	long result;
	GetProperty(0x28, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetFocusMode(long propVal)
{
	SetProperty(0x28, VT_I4, propVal);
}

long CBtnEnh::GetSpecialEffect()
{
	long result;
	GetProperty(0x29, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetSpecialEffect(long propVal)
{
	SetProperty(0x29, VT_I4, propVal);
}

short CBtnEnh::GetCaptionWordWrapPerc()
{
	short result;
	GetProperty(0x2a, VT_I2, (void*)&result);
	return result;
}

void CBtnEnh::SetCaptionWordWrapPerc(short propVal)
{
	SetProperty(0x2a, VT_I2, propVal);
}

short CBtnEnh::GetOptimization()
{
	short result;
	GetProperty(0x2b, VT_I2, (void*)&result);
	return result;
}

void CBtnEnh::SetOptimization(short propVal)
{
	SetProperty(0x2b, VT_I2, propVal);
}

BOOL CBtnEnh::GetClickable()
{
	BOOL result;
	GetProperty(0x2c, VT_BOOL, (void*)&result);
	return result;
}

void CBtnEnh::SetClickable(BOOL propVal)
{
	SetProperty(0x2c, VT_BOOL, propVal);
}

unsigned long CBtnEnh::GetBackColor()
{
	unsigned long result;
	GetProperty(0x2d, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetBackColor(unsigned long propVal)
{
	SetProperty(0x2d, VT_I4, propVal);
}

unsigned long CBtnEnh::GetForeColor()
{
	unsigned long result;
	GetProperty(0x2e, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetForeColor(unsigned long propVal)
{
	SetProperty(0x2e, VT_I4, propVal);
}

BOOL CBtnEnh::GetIgnoreSpaceBar()
{
	BOOL result;
	GetProperty(0x2f, VT_BOOL, (void*)&result);
	return result;
}

void CBtnEnh::SetIgnoreSpaceBar(BOOL propVal)
{
	SetProperty(0x2f, VT_BOOL, propVal);
}

long CBtnEnh::GetSpecialEffectFactor()
{
	long result;
	GetProperty(0x30, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetSpecialEffectFactor(long propVal)
{
	SetProperty(0x30, VT_I4, propVal);
}

unsigned long CBtnEnh::GetForeColorDisabled()
{
	unsigned long result;
	GetProperty(0x4f, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetForeColorDisabled(unsigned long propVal)
{
	SetProperty(0x4f, VT_I4, propVal);
}

unsigned long CBtnEnh::GetBackColorDisabled()
{
	unsigned long result;
	GetProperty(0x50, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetBackColorDisabled(unsigned long propVal)
{
	SetProperty(0x50, VT_I4, propVal);
}

unsigned long CBtnEnh::GetBackColorMouseOver()
{
	unsigned long result;
	GetProperty(0x51, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetBackColorMouseOver(unsigned long propVal)
{
	SetProperty(0x51, VT_I4, propVal);
}

unsigned long CBtnEnh::GetBackColorFocus()
{
	unsigned long result;
	GetProperty(0x52, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetBackColorFocus(unsigned long propVal)
{
	SetProperty(0x52, VT_I4, propVal);
}

unsigned long CBtnEnh::GetBackColorInterior()
{
	unsigned long result;
	GetProperty(0x53, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetBackColorInterior(unsigned long propVal)
{
	SetProperty(0x53, VT_I4, propVal);
}

unsigned long CBtnEnh::GetForeColorMouseOver()
{
	unsigned long result;
	GetProperty(0x54, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetForeColorMouseOver(unsigned long propVal)
{
	SetProperty(0x54, VT_I4, propVal);
}

long CBtnEnh::GetFlatPillowFactor()
{
	long result;
	GetProperty(0x57, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetFlatPillowFactor(long propVal)
{
	SetProperty(0x57, VT_I4, propVal);
}

long CBtnEnh::GetShadowMode()
{
	long result;
	GetProperty(0x58, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetShadowMode(long propVal)
{
	SetProperty(0x58, VT_I4, propVal);
}

long CBtnEnh::GetStyle()
{
	long result;
	GetProperty(0x5f, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetStyle(long propVal)
{
	SetProperty(0x5f, VT_I4, propVal);
}

CString CBtnEnh::GetPictureDisabled()
{
	CString result;
	GetProperty(0x60, VT_BSTR, (void*)&result);
	return result;
}

void CBtnEnh::SetPictureDisabled(LPCTSTR propVal)
{
	SetProperty(0x60, VT_BSTR, propVal);
}

unsigned long CBtnEnh::GetForeColorPressed()
{
	unsigned long result;
	GetProperty(0x61, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetForeColorPressed(unsigned long propVal)
{
	SetProperty(0x61, VT_I4, propVal);
}

unsigned long CBtnEnh::GetBackColorPressed()
{
	unsigned long result;
	GetProperty(0x62, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetBackColorPressed(unsigned long propVal)
{
	SetProperty(0x62, VT_I4, propVal);
}

short CBtnEnh::GetValue()
{
	short result;
	GetProperty(0x69, VT_I2, (void*)&result);
	return result;
}

void CBtnEnh::SetValue(short propVal)
{
	SetProperty(0x69, VT_I2, propVal);
}

long CBtnEnh::GetOrientation()
{
	long result;
	GetProperty(0x6c, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetOrientation(long propVal)
{
	SetProperty(0x6c, VT_I4, propVal);
}

LPDISPATCH CBtnEnh::GetColorSurfaceNormal()
{
	LPDISPATCH result;
	GetProperty(0x6d, VT_DISPATCH, (void*)&result);
	return result;
}

void CBtnEnh::SetColorSurfaceNormal(LPDISPATCH propVal)
{
	SetProperty(0x6d, VT_DISPATCH, propVal);
}

LPDISPATCH CBtnEnh::GetColorSurfaceMO()
{
	LPDISPATCH result;
	GetProperty(0x6e, VT_DISPATCH, (void*)&result);
	return result;
}

void CBtnEnh::SetColorSurfaceMO(LPDISPATCH propVal)
{
	SetProperty(0x6e, VT_DISPATCH, propVal);
}

LPDISPATCH CBtnEnh::GetColorSurfaceInternal()
{
	LPDISPATCH result;
	GetProperty(0x6f, VT_DISPATCH, (void*)&result);
	return result;
}

void CBtnEnh::SetColorSurfaceInternal(LPDISPATCH propVal)
{
	SetProperty(0x6f, VT_DISPATCH, propVal);
}

LPDISPATCH CBtnEnh::GetColorSurfaceFocus()
{
	LPDISPATCH result;
	GetProperty(0x70, VT_DISPATCH, (void*)&result);
	return result;
}

void CBtnEnh::SetColorSurfaceFocus(LPDISPATCH propVal)
{
	SetProperty(0x70, VT_DISPATCH, propVal);
}

LPDISPATCH CBtnEnh::GetColorSurfaceDisabled()
{
	LPDISPATCH result;
	GetProperty(0x71, VT_DISPATCH, (void*)&result);
	return result;
}

void CBtnEnh::SetColorSurfaceDisabled(LPDISPATCH propVal)
{
	SetProperty(0x71, VT_DISPATCH, propVal);
}

LPDISPATCH CBtnEnh::GetColorSurfacePressed()
{
	LPDISPATCH result;
	GetProperty(0x72, VT_DISPATCH, (void*)&result);
	return result;
}

void CBtnEnh::SetColorSurfacePressed(LPDISPATCH propVal)
{
	SetProperty(0x72, VT_DISPATCH, propVal);
}

LPDISPATCH CBtnEnh::GetTextDescrCaption()
{
	LPDISPATCH result;
	GetProperty(0x73, VT_DISPATCH, (void*)&result);
	return result;
}

void CBtnEnh::SetTextDescrCaption(LPDISPATCH propVal)
{
	SetProperty(0x73, VT_DISPATCH, propVal);
}

LPDISPATCH CBtnEnh::GetTextDescrLT()
{
	LPDISPATCH result;
	GetProperty(0x74, VT_DISPATCH, (void*)&result);
	return result;
}

void CBtnEnh::SetTextDescrLT(LPDISPATCH propVal)
{
	SetProperty(0x74, VT_DISPATCH, propVal);
}

LPDISPATCH CBtnEnh::GetTextDescrCT()
{
	LPDISPATCH result;
	GetProperty(0x75, VT_DISPATCH, (void*)&result);
	return result;
}

void CBtnEnh::SetTextDescrCT(LPDISPATCH propVal)
{
	SetProperty(0x75, VT_DISPATCH, propVal);
}

LPDISPATCH CBtnEnh::GetTextDescrRT()
{
	LPDISPATCH result;
	GetProperty(0x76, VT_DISPATCH, (void*)&result);
	return result;
}

void CBtnEnh::SetTextDescrRT(LPDISPATCH propVal)
{
	SetProperty(0x76, VT_DISPATCH, propVal);
}

LPDISPATCH CBtnEnh::GetTextDescrLM()
{
	LPDISPATCH result;
	GetProperty(0x77, VT_DISPATCH, (void*)&result);
	return result;
}

void CBtnEnh::SetTextDescrLM(LPDISPATCH propVal)
{
	SetProperty(0x77, VT_DISPATCH, propVal);
}

LPDISPATCH CBtnEnh::GetTextDescrRM()
{
	LPDISPATCH result;
	GetProperty(0x78, VT_DISPATCH, (void*)&result);
	return result;
}

void CBtnEnh::SetTextDescrRM(LPDISPATCH propVal)
{
	SetProperty(0x78, VT_DISPATCH, propVal);
}

LPDISPATCH CBtnEnh::GetTextDescrLB()
{
	LPDISPATCH result;
	GetProperty(0x79, VT_DISPATCH, (void*)&result);
	return result;
}

void CBtnEnh::SetTextDescrLB(LPDISPATCH propVal)
{
	SetProperty(0x79, VT_DISPATCH, propVal);
}

LPDISPATCH CBtnEnh::GetTextDescrCB()
{
	LPDISPATCH result;
	GetProperty(0x7a, VT_DISPATCH, (void*)&result);
	return result;
}

void CBtnEnh::SetTextDescrCB(LPDISPATCH propVal)
{
	SetProperty(0x7a, VT_DISPATCH, propVal);
}

LPDISPATCH CBtnEnh::GetTextDescrRB()
{
	LPDISPATCH result;
	GetProperty(0x7b, VT_DISPATCH, (void*)&result);
	return result;
}

void CBtnEnh::SetTextDescrRB(LPDISPATCH propVal)
{
	SetProperty(0x7b, VT_DISPATCH, propVal);
}

CTexture CBtnEnh::GetTextureSurface()
{
	LPDISPATCH pDispatch;
	GetProperty(0x7c, VT_DISPATCH, (void*)&pDispatch);
	return CTexture(pDispatch);
}

void CBtnEnh::SetTextureSurface(LPDISPATCH propVal)
{
	SetProperty(0x7c, VT_DISPATCH, propVal);
}

long CBtnEnh::GetFrameEffect()
{
	long result;
	GetProperty(0x7f, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetFrameEffect(long propVal)
{
	SetProperty(0x7f, VT_I4, propVal);
}

BOOL CBtnEnh::GetOptionGroupDelimiter()
{
	BOOL result;
	GetProperty(0x80, VT_BOOL, (void*)&result);
	return result;
}

void CBtnEnh::SetOptionGroupDelimiter(BOOL propVal)
{
	SetProperty(0x80, VT_BOOL, propVal);
}

BOOL CBtnEnh::GetPictureVisible()
{
	BOOL result;
	GetProperty(0x83, VT_BOOL, (void*)&result);
	return result;
}

void CBtnEnh::SetPictureVisible(BOOL propVal)
{
	SetProperty(0x83, VT_BOOL, propVal);
}

long CBtnEnh::GetTextCaptionAlignment()
{
	long result;
	GetProperty(0x8c, VT_I4, (void*)&result);
	return result;
}

void CBtnEnh::SetTextCaptionAlignment(long propVal)
{
	SetProperty(0x8c, VT_I4, propVal);
}

short CBtnEnh::GetSpotlightOffsetX()
{
	short result;
	GetProperty(0x8d, VT_I2, (void*)&result);
	return result;
}

void CBtnEnh::SetSpotlightOffsetX(short propVal)
{
	SetProperty(0x8d, VT_I2, propVal);
}

short CBtnEnh::GetSpotlightOffsetY()
{
	short result;
	GetProperty(0x8e, VT_I2, (void*)&result);
	return result;
}

void CBtnEnh::SetSpotlightOffsetY(short propVal)
{
	SetProperty(0x8e, VT_I2, propVal);
}

short CBtnEnh::GetSpotlightResizeWidth()
{
	short result;
	GetProperty(0x8f, VT_I2, (void*)&result);
	return result;
}

void CBtnEnh::SetSpotlightResizeWidth(short propVal)
{
	SetProperty(0x8f, VT_I2, propVal);
}

short CBtnEnh::GetSpotlightResizeHeight()
{
	short result;
	GetProperty(0x90, VT_I2, (void*)&result);
	return result;
}

void CBtnEnh::SetSpotlightResizeHeight(short propVal)
{
	SetProperty(0x90, VT_I2, propVal);
}

short CBtnEnh::GetCornerFactor()
{
	short result;
	GetProperty(0x91, VT_I2, (void*)&result);
	return result;
}

void CBtnEnh::SetCornerFactor(short propVal)
{
	SetProperty(0x91, VT_I2, propVal);
}

BOOL CBtnEnh::GetUseAntialias()
{
	BOOL result;
	GetProperty(0x92, VT_BOOL, (void*)&result);
	return result;
}

void CBtnEnh::SetUseAntialias(BOOL propVal)
{
	SetProperty(0x92, VT_BOOL, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CBtnEnh operations

void CBtnEnh::EnableSound(short nSound, BOOL bEnable)
{
	static BYTE parms[] =
		VTS_I2 VTS_BOOL;
	InvokeHelper(0x33, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nSound, bEnable);
}

void CBtnEnh::DoClick()
{
	InvokeHelper(DISPID_DOCLICK, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CBtnEnh::Refresh()
{
	InvokeHelper(DISPID_REFRESH, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CBtnEnh::SetNSContainerColor(unsigned long Color)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x34, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Color);
}

long CBtnEnh::SetPictureFromHandle(long index, long hBmp)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x36, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		index, hBmp);
	return result;
}

long CBtnEnh::SetPictureFromMemory(long index, const VARIANT& pData, long sizeData)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_VARIANT VTS_I4;
	InvokeHelper(0x37, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		index, &pData, sizeData);
	return result;
}

long CBtnEnh::SetAnimFromMemory(long index, const VARIANT& pData, long sizeData)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_VARIANT VTS_I4;
	InvokeHelper(0x38, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		index, &pData, sizeData);
	return result;
}

long CBtnEnh::SetCursorFromHandle(long hCursor)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x39, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hCursor);
	return result;
}

long CBtnEnh::SetSoundFromMemory(long index, const VARIANT& pData, long sizeData)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_VARIANT VTS_I4;
	InvokeHelper(0x3a, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		index, &pData, sizeData);
	return result;
}

void CBtnEnh::SetAutomaticRefresh(BOOL bAutoRefresh)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x3b, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bAutoRefresh);
}

void CBtnEnh::SetSoundSync(long sound, BOOL flag)
{
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0x3c, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 sound, flag);
}

void CBtnEnh::EnableAcceleratorForVB()
{
	InvokeHelper(0x3d, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

long CBtnEnh::SetPictureFromNet(long index, LPCTSTR strAddress, LPCTSTR strUsername, LPCTSTR strPassword)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR VTS_BSTR VTS_BSTR;
	InvokeHelper(0x41, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		index, strAddress, strUsername, strPassword);
	return result;
}

long CBtnEnh::SetSoundFromNet(long index, LPCTSTR strAddress, LPCTSTR strUsername, LPCTSTR strPassword)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR VTS_BSTR VTS_BSTR;
	InvokeHelper(0x42, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		index, strAddress, strUsername, strPassword);
	return result;
}

BOOL CBtnEnh::SetAnimFromNet(long index, LPCTSTR strAddress, LPCTSTR strUsername, LPCTSTR strPassword)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR VTS_BSTR VTS_BSTR;
	InvokeHelper(0x43, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		index, strAddress, strUsername, strPassword);
	return result;
}

void CBtnEnh::MouseCapture(BOOL bCapture)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x45, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bCapture);
}

BOOL CBtnEnh::ExportBtnImage(short nImage, LPCTSTR strFilename, long nFormat)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_BSTR VTS_I4;
	InvokeHelper(0x55, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		nImage, strFilename, nFormat);
	return result;
}

short CBtnEnh::LoadTemplate(LPCTSTR strFilename)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x59, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		strFilename);
	return result;
}

short CBtnEnh::SaveTemplate(LPCTSTR strFilename)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x5a, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		strFilename);
	return result;
}

short CBtnEnh::LoadTemplateEx(LPCTSTR strFilename)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x5b, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		strFilename);
	return result;
}

short CBtnEnh::SaveTemplateEx(LPCTSTR strFilename)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x5c, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		strFilename);
	return result;
}

void CBtnEnh::SetHelpLink(short nPage, LPCTSTR strLink)
{
	static BYTE parms[] =
		VTS_I2 VTS_BSTR;
	InvokeHelper(0x5d, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nPage, strLink);
}

void CBtnEnh::SetTemplateBinDir(long nType, LPCTSTR strDirPath)
{
	static BYTE parms[] =
		VTS_I4 VTS_BSTR;
	InvokeHelper(0x6b, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nType, strDirPath);
}

CString CBtnEnh::GetHelperString(short dispid, short nValue)
{
	CString result;
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x7d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		dispid, nValue);
	return result;
}

void CBtnEnh::ResetProperties()
{
	InvokeHelper(0x7e, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

long CBtnEnh::GetBackPicture(long hWndDest)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x81, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hWndDest);
	return result;
}

void CBtnEnh::SetBackPicture(long hBitmap)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x82, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 hBitmap);
}

short CBtnEnh::AnimGetFramesRate()
{
	short result;
	InvokeHelper(0x84, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

long CBtnEnh::AnimSetFramesRate(short nRate)
{
	long result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x85, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nRate);
	return result;
}

short CBtnEnh::AnimGetFramesCount()
{
	short result;
	InvokeHelper(0x86, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

long CBtnEnh::AnimShowFrame(short nFrame)
{
	long result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x87, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nFrame);
	return result;
}

long CBtnEnh::AnimPause()
{
	long result;
	InvokeHelper(0x88, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CBtnEnh::AnimResume()
{
	long result;
	InvokeHelper(0x89, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CBtnEnh::AnimInvertPlay()
{
	long result;
	InvokeHelper(0x8a, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

void CBtnEnh::SetBackPictureVisible(BOOL bVisible)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x8b, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bVisible);
}

void CBtnEnh::ClearButtonCache()
{
	InvokeHelper(0x93, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

short CBtnEnh::GetValueEx()
{
	short result;
	InvokeHelper(0x94, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

void CBtnEnh::SetValueEx(short nValue)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x95, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nValue);
}

void CBtnEnh::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
