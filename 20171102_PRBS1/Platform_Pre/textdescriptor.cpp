// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "textdescriptor.h"


/////////////////////////////////////////////////////////////////////////////
// CTextDescriptor properties

unsigned long CTextDescriptor::GetColorNormal()
{
	unsigned long result;
	GetProperty(0x1, VT_I4, (void*)&result);
	return result;
}

void CTextDescriptor::SetColorNormal(unsigned long propVal)
{
	SetProperty(0x1, VT_I4, propVal);
}

unsigned long CTextDescriptor::GetColorMouseOver()
{
	unsigned long result;
	GetProperty(0x2, VT_I4, (void*)&result);
	return result;
}

void CTextDescriptor::SetColorMouseOver(unsigned long propVal)
{
	SetProperty(0x2, VT_I4, propVal);
}

unsigned long CTextDescriptor::GetColorPressed()
{
	unsigned long result;
	GetProperty(0x3, VT_I4, (void*)&result);
	return result;
}

void CTextDescriptor::SetColorPressed(unsigned long propVal)
{
	SetProperty(0x3, VT_I4, propVal);
}

unsigned long CTextDescriptor::GetColorSolidBack()
{
	unsigned long result;
	GetProperty(0x4, VT_I4, (void*)&result);
	return result;
}

void CTextDescriptor::SetColorSolidBack(unsigned long propVal)
{
	SetProperty(0x4, VT_I4, propVal);
}

unsigned long CTextDescriptor::GetColorBorder()
{
	unsigned long result;
	GetProperty(0x5, VT_I4, (void*)&result);
	return result;
}

void CTextDescriptor::SetColorBorder(unsigned long propVal)
{
	SetProperty(0x5, VT_I4, propVal);
}

short CTextDescriptor::GetOffsetX()
{
	short result;
	GetProperty(0x6, VT_I2, (void*)&result);
	return result;
}

void CTextDescriptor::SetOffsetX(short propVal)
{
	SetProperty(0x6, VT_I2, propVal);
}

short CTextDescriptor::GetOffsetY()
{
	short result;
	GetProperty(0x7, VT_I2, (void*)&result);
	return result;
}

void CTextDescriptor::SetOffsetY(short propVal)
{
	SetProperty(0x7, VT_I2, propVal);
}

long CTextDescriptor::GetSpecialEffect()
{
	long result;
	GetProperty(0x8, VT_I4, (void*)&result);
	return result;
}

void CTextDescriptor::SetSpecialEffect(long propVal)
{
	SetProperty(0x8, VT_I4, propVal);
}

short CTextDescriptor::GetSpecialEffectFactor()
{
	short result;
	GetProperty(0x9, VT_I2, (void*)&result);
	return result;
}

void CTextDescriptor::SetSpecialEffectFactor(short propVal)
{
	SetProperty(0x9, VT_I2, propVal);
}

short CTextDescriptor::GetAngle()
{
	short result;
	GetProperty(0xa, VT_I2, (void*)&result);
	return result;
}

void CTextDescriptor::SetAngle(short propVal)
{
	SetProperty(0xa, VT_I2, propVal);
}

short CTextDescriptor::GetTransparentFactor()
{
	short result;
	GetProperty(0xb, VT_I2, (void*)&result);
	return result;
}

void CTextDescriptor::SetTransparentFactor(short propVal)
{
	SetProperty(0xb, VT_I2, propVal);
}

BOOL CTextDescriptor::GetAntialias()
{
	BOOL result;
	GetProperty(0xc, VT_BOOL, (void*)&result);
	return result;
}

void CTextDescriptor::SetAntialias(BOOL propVal)
{
	SetProperty(0xc, VT_BOOL, propVal);
}

BOOL CTextDescriptor::GetSolidBack()
{
	BOOL result;
	GetProperty(0xd, VT_BOOL, (void*)&result);
	return result;
}

void CTextDescriptor::SetSolidBack(BOOL propVal)
{
	SetProperty(0xd, VT_BOOL, propVal);
}

CString CTextDescriptor::GetText()
{
	CString result;
	GetProperty(0xe, VT_BSTR, (void*)&result);
	return result;
}

void CTextDescriptor::SetText(LPCTSTR propVal)
{
	SetProperty(0xe, VT_BSTR, propVal);
}

BOOL CTextDescriptor::GetVisible()
{
	BOOL result;
	GetProperty(0xf, VT_BOOL, (void*)&result);
	return result;
}

void CTextDescriptor::SetVisible(BOOL propVal)
{
	SetProperty(0xf, VT_BOOL, propVal);
}

BOOL CTextDescriptor::GetBorder()
{
	BOOL result;
	GetProperty(0x10, VT_BOOL, (void*)&result);
	return result;
}

void CTextDescriptor::SetBorder(BOOL propVal)
{
	SetProperty(0x10, VT_BOOL, propVal);
}

BOOL CTextDescriptor::GetDoubleSpace()
{
	BOOL result;
	GetProperty(0x11, VT_BOOL, (void*)&result);
	return result;
}

void CTextDescriptor::SetDoubleSpace(BOOL propVal)
{
	SetProperty(0x11, VT_BOOL, propVal);
}

BOOL CTextDescriptor::GetSolidBackShadow()
{
	BOOL result;
	GetProperty(0x12, VT_BOOL, (void*)&result);
	return result;
}

void CTextDescriptor::SetSolidBackShadow(BOOL propVal)
{
	SetProperty(0x12, VT_BOOL, propVal);
}

unsigned long CTextDescriptor::GetColorHighlight()
{
	unsigned long result;
	GetProperty(0x13, VT_I4, (void*)&result);
	return result;
}

void CTextDescriptor::SetColorHighlight(unsigned long propVal)
{
	SetProperty(0x13, VT_I4, propVal);
}

unsigned long CTextDescriptor::GetColorShadow()
{
	unsigned long result;
	GetProperty(0x14, VT_I4, (void*)&result);
	return result;
}

void CTextDescriptor::SetColorShadow(unsigned long propVal)
{
	SetProperty(0x14, VT_I4, propVal);
}

unsigned long CTextDescriptor::GetColorHalo()
{
	unsigned long result;
	GetProperty(0x15, VT_I4, (void*)&result);
	return result;
}

void CTextDescriptor::SetColorHalo(unsigned long propVal)
{
	SetProperty(0x15, VT_I4, propVal);
}

unsigned long CTextDescriptor::GetColorSolidBackShadow()
{
	unsigned long result;
	GetProperty(0x16, VT_I4, (void*)&result);
	return result;
}

void CTextDescriptor::SetColorSolidBackShadow(unsigned long propVal)
{
	SetProperty(0x16, VT_I4, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CTextDescriptor operations
