/* Generated by Together */

#ifndef MCYLINDER_H
#define MCYLINDER_H

#include "ICylinder.h"
#include "MCylinderData.h"
#include "MTickTimer.h"

class IIO;

class MCylinder : public ICylinder
{
private:

	int m_iCylID;
	CString m_strCylName;

	/** 생성된 Cylinder 객체와 연관된 Solenoid 단동식일때는 하나 사용, 복동식일때는 2개 사용  */
	unsigned short m_rgusSolenoid[2];

	/** 생성된 Cylinder 객체와 연관된 가감속 Solenoid  +,- 방향 1개씩   */
	unsigned short m_rgusAccSolenoid[2];

	/** Up Sensor  : 체크하고자 하는 갯수 만큼 지정 하고 나머지는 NULL로 한다. */
	unsigned short m_rgusUpSensor[DEF_MAX_CYLINDER_SENSOR];

	/** Down Sensor : 체크하고자 하는 갯수 만큼 지정 하고 나머지는 NULL로 한다. */
	unsigned short m_rgusDownSensor[DEF_MAX_CYLINDER_SENSOR];

	/** Middle Sensor : 등록된 Sensor들의 상태 체크  */
	unsigned short m_rgusMiddleSensor[DEF_MAX_CYLINDER_SENSOR];

	/** 가감속 센서 : +방향, - 방향 2개 밖에 지정할 수 없다. */
	unsigned short m_rgusAccSensor[2];

	/** @link aggregation Cylinder 타입 */
	ECylinderType m_eCylinderType;

	/** @link aggregation Solenoid 타입 */
	ESolenoidType m_eSolenoidType;

	/** Cylinder Data가 저장될 File Name */
	CString m_strFileName;

	/** Cylinder Data가 저장될 File Path */
	CString m_strFilePath;

	MCylinderData m_CylParameter;

	/** Cylinder Up 동작 시간 Timer */
	MTickTimer m_tmUpTimer;

	/** Cylinder Down 동작 시간 Timer */
	MTickTimer m_tmDownTimer;

	/** Cylinder Up 동작 시간 */
	double m_dUpElapseTime;

	/** Cylinder Down 동작 시간 */
	double m_dDownElapseTime;

#ifdef SIMULATION
	/** Simulation 동작 시에 Cyclinder Up 완료 상태를 확인하기 위한 flag */
	volatile BOOL m_bSimulUpState;
	/** Simulation 동작 시에 Cyclinder Down 완료 상태를 확인하기 위한 flag */
	volatile BOOL m_bSimulDownState;
	/** Simulation 동작 시에 Middle 상태는 Up,Down State 모두 Off 로 표시함. */

	/** Simulation Mode 에서 Up 동작 진행 중 상태 표시 flag */
	volatile BOOL m_bCylinderOnBeingUpState;
	/** Simulation Mode 에서 Middle 동작 진행 중 상태 표시 flag */
	volatile BOOL m_bCylinderOnBeingMiddleState;
	/** Simulation Mode 에서 Down 동작 진행 중 상태 표시 flag */
	volatile BOOL m_bCylinderOnBeingDownState;

	/** Simulation 동작 시에 Cylinder 동작 시간 Check Timer */
	MTickTimer m_tmSimulTimer;

	CRITICAL_SECTION m_csSimul;
#endif

public:
	/** Default 생성자 */
	MCylinder();

	MCylinder(SCommonAttribute commonData, IIO	*pIIO, SCylinderData datComponent);

	virtual ~MCylinder();

    int GetCylinderTime(double & dMovingTime, double & dSettlingTime1, double & dSettlingTime2, double & dNoSenMovingTime);

	int GetCylinderTime(ECylinderTime eCylinderTime, double & dCylinderTime);

    virtual BOOL IsUp();

    virtual BOOL IsDown();

    virtual BOOL IsLeft();

    virtual BOOL IsRight();

    virtual BOOL IsFront();

    virtual BOOL IsBack();

    virtual BOOL IsDownstr();

    virtual BOOL IsUpstr();

    virtual BOOL IsCW();

    virtual BOOL IsCCW();

    virtual BOOL IsOpen();

    virtual BOOL IsClose();

    virtual BOOL IsMiddle();

    virtual BOOL IsExpand();

    virtual BOOL IsShrink();

	int Up(int skip_sensor = FALSE);

	int Down(int skip_sensor = FALSE);

	int Left(int skip_sensor = FALSE);

	int Right(int skip_sensor = FALSE);

	int Front(int skip_sensor = FALSE);

	int Back(int skip_sensor = FALSE);

	int Upstr(int skip_sensor = FALSE);

	int Downstr(int skip_sensor = FALSE);

	int CW(int skip_sensor = FALSE);

	int CCW(int skip_sensor = FALSE);

	int Open(int skip_sensor = FALSE);

	int Close(int skip_sensor = FALSE);

	int Middle(int skip_sensor = FALSE);//중간정지..3way sv만허용...

    int Expand(int skip_sensor = FALSE);

    int Shrink(int skip_sensor = FALSE);

	int OutputToggle();

    int StartUp();

    int StartDown();

    int StartLeft();

    int StartRight();

    int StartFront();

    int StartBack();

    int StartUpstr();

    int StartDownstr();

    int StartCW();

    int StartCCW();

    int StartOpen();

    int StartClose();

    int StartMiddle();//중간정지..3way sv만허용...

    int StartExpand();

    int StartShrink();

/*----------- 실린더 동작완료때까지 Sleep   -----------------------*/

    int Wait4UpComplete();

    int Wait4DownComplete();

    int Wait4LeftComplete();

    int Wait4RightComplete();

    int Wait4FrontComplete();

    int Wait4BackComplete();
 
    int Wait4CWComplete();

    int Wait4CCWComplete();

    int Wait4OpenComplete();

    int Wait4CloseComplete();

    int Wait4DownstrComplete();

    int Wait4UpstrComplete();

    int Wait4MiddleComplete(BOOL bDir);//중간정지..3way sv만허용...

    int Wait4ExpandComplete();

    int Wait4ShrinkComplete();

	void OffSolenoid();

	void OffSolenoid(BOOL bDir);

	BOOL IsMoveComplete(BOOL bDir);

/*------------------------ Common Interface -----------------------*/

	int AssignComponents(IIO *pIO);

	int SetData(SCylinderData datComponent);

	int GetData(SCylinderData *pData);
 
	int LoadParameter();

	int SaveParameter(MCylinderData* pcylTimerData);

	void GetParameter(MCylinderData* pcylTimerData);

	CString GetCylinderName();

	double GetUpElapseTime();

	double GetDownElapseTime();

	unsigned short* GetSolAddr();

	unsigned short* GetUpSensorAddr();

	unsigned short* GetDownSensorAddr();
};
#endif //MCYLINDER_H
