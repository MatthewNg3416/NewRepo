/* Generated by Together */

#ifndef IVACUUM_H
#define IVACUUM_H

#include "ICommon.h"
#include "MVacuumData.h"

class IIO;

const int DEF_MAX_VACUUM_SOLENOID			= 4;
const int DEF_MAX_VACUUM_SENSOR				= 4;

const int ERR_VACUUM_SUCCESS				= 0;
const int ERR_VACUUM_TIMEOUT_ON				= 1;
const int ERR_VACUUM_TIMEOUT_OFF			= 2;
const int ERR_VACUUM_FAIL_IN_LOADING_PARAM	= 3;
const int ERR_VACUUM_FAIL_IN_SAVING_PARAM	= 4;

/** Vacuum 타이머 종류 정의
 * @stereotype enumeration */
enum EVacuumTime
{
    TURNING_TIME, ON_SETTLING_TIME, OFF_SETTLING_TIME
};

/** Vacuum 타입 정리
 * @stereotype enumeration */
enum EVacuumType
{
	UNKOWN_VACUUM,
    SINGLE_VACUUM,
	SINGLE_VACUUM_W_D_BLOW,	// Vacuum 출력에 종속된 Blow (dependent)
	SINGLE_VACUUM_W_I_BLOW, // Vacuum 출력과 독립된 Blow (independent)

    DOUBLE_VACUUM,
	DOUBLE_VACUUM_W_D_BLOW,	// Vacuum 출력에 종속된 Blow (dependent)
	DOUBLE_VACUUM_W_I_BLOW, // Vacuum 출력과 독립된 Blow (independent)

    HETERO_DOUBLE_VACUUM,
    REVERSE_DOUBLE_VACUUM,
	REVERSE_SINGLE_VACUUM
};

typedef struct
{
	/** 생성된 Vacuum 객체의 ID */
	int m_iVacID;
	/** 생성된 Vacuum 객체의 이름 */
//	char m_szName[256];
	WCHAR m_szName[256];
	/** Vacuum을 제어하는 Solenoid들의 I/O Address들에 대한 포인터 */
	unsigned short m_rgusSolenoid[DEF_MAX_VACUUM_SOLENOID];
	/** Vacuum의 흡착 상태를 확인하는 Sensor들의 I/O Address들에 대한 포인터 */
	unsigned short m_rgusSensor[DEF_MAX_VACUUM_SENSOR];
	/** @link aggregation Vacuum Type */
	EVacuumType m_lnkVacuumType;

}SVacuumVal;

typedef struct tagSVacuumData
{
	
	SVacuumVal m_sVacVal;

	/** Vacuum Data가 저장될 File Name */
	CString m_strFileName;

} SVacuumData, *pSVacuumData;

/**
 * @interface
 */
class IVacuum : public virtual ICommon
{

public:
	IIO* m_gpIIO;

/*----------- Vacuum 파라미터 설정  -----------------------*/

    virtual int GetVacuumTime(double& dTurningTime, double& dOnSettlingTime, double& dOffSettlingTime) = 0;

    virtual int GetVacuumTime(EVacuumTime eVacuumTime, double & dVacuumTime) = 0;

/*----------- Vacuum 상태 확인  -----------------------*/
	virtual int CompareIO() = 0;

	virtual BOOL IsOn() = 0;

	virtual BOOL IsOff() = 0;

/*----------- Vacuum 동작  -----------------------*/
	virtual int On(int skip_sensor = FALSE) = 0;

    virtual int Off(int skip_sensor = FALSE) = 0;

/*----------- Vacuum 동작 시작  -----------------------*/

    virtual int StartOn() = 0;

    virtual int StartOff() = 0;

/*----------- Vacuum 동작완료시까지 Sleep  -----------------------*/
    virtual int Wait4OnComplete() = 0;

    virtual int Wait4OffComplete() = 0;

	virtual void OffSolenoid() = 0;

/*------------------------ Common Interface -----------------------*/
	virtual int AssignComponents(IIO* pIO) = 0;

	virtual int SetData(SVacuumData datComponent) = 0;

	virtual int GetData(SVacuumData *pData) = 0; 

	virtual int LoadParameter() = 0;

	virtual int SaveParameter(MVacuumData* pvacTimerData) = 0;
	
	virtual void GetParameter(MVacuumData* pvacParameter) = 0;

	virtual CString GetVacuumName() = 0;

	virtual unsigned short* GetSolAddr() = 0;

	virtual unsigned short* GetSensorAddr() = 0;
};
#endif //IVACUUM_H
