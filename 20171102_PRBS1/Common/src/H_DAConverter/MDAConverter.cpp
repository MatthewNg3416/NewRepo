/* Generated by Together */

#include "stdafx.h"
#include "MDAConverter.h"
#include "MDAConverterData.h"
#include <math.h>

#include "common.h"


#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif

/** @stereotype constructor */
MDAConverter::MDAConverter()
{
	/** Referenced Component 초기화 */
	m_gpIIO	= NULL;
	
	/** Data 초기화 */
	m_usOStarBit = 0;
	m_usIStarBit = 0;
  
	/** 생성된 DAConverter의 BitSize */
	m_usOBitSize = 0;
	m_usIBitSize = 0;
  
	int i;
	/** 생성된 DAConverter의 Bit 배열.  */
	for(i=0; i<DEF_MAX_DACONVERTER_BIT; i++) m_rgusOBitAddress[i] = 0;
	for(i=0; i<DEF_MAX_DACONVERTER_BIT; i++) m_rgusIBitAddress[i] = 0;

	/** 현재 적용된 값	 */
	unsigned short m_usCurValue	= 0;

	m_eDAConverterType = LIGHTENING;
}

/** @stereotype constructor
*/
MDAConverter::MDAConverter(SCommonAttribute commonData, IIO	*pIIO, SDAConverterData datComponent )
: ICommon(commonData)
{
	CString	strLogMsg;

	m_gpIIO = pIIO;
	SetData(datComponent);
	
	strLogMsg.Format(_T("MDAConverter() : ObjectID=%d OK"), GetObjectID() );
	WriteLog(DEF_MLOG_NORMAL_LOG_LEVEL, strLogMsg, __FILE__, __LINE__);
}


MDAConverter::~MDAConverter()
{
}

int MDAConverter::SetValue(unsigned short val)
{
	unsigned short rgusRemainder[DEF_MAX_DACONVERTER_BIT];
	unsigned short usDivideValue = val; 
	memset(rgusRemainder, 0, sizeof(unsigned short)*DEF_MAX_DACONVERTER_BIT);

	if( m_DAConverterParameter.m_dSlant == 0.0 )
		m_DAConverterParameter.m_dSlant = 1.0;

	if( m_eDAConverterType == PRESSURE )
		usDivideValue = unsigned short( (val - m_DAConverterParameter.m_dOffset) /  m_DAConverterParameter.m_dSlant );

	if( usDivideValue < 0 || usDivideValue > DEF_MAX_DACONVERTER_VALUE)
	{
		//WriteErrorLog("InValid Parameter");
		SetErrorLevel(_T("DACONVERTER set Value"),3, __FILE__, __LINE__);
		return generateErrorCode(205000+ERR_DACONVERTER_INVALID_VALUE);	
	}	

	int i;
	for(i=0; i<m_usOBitSize && usDivideValue>0; i++)
	{
		rgusRemainder[i] = usDivideValue % 2;
		usDivideValue = unsigned short(usDivideValue / 2);
	}

	for(i=0 ; i<m_usOBitSize ; i++) 
	{
		rgusRemainder[i] ? m_gpIIO->OutputOn(m_rgusOBitAddress[i]) : m_gpIIO->OutputOff(m_rgusOBitAddress[i]);
	}

	m_usCurValue = val;

	return DEF_DACONVERTER_SUCCESS;
}

int MDAConverter::GetValue()
{
	m_usCurValue = 0;
	if( m_eDAConverterType == PRESSURE )
	{
		USHORT dMountPressure = 0;
		for(int i=0; i<m_usIBitSize ; i++) 
		{
			dMountPressure += (USHORT)( pow(2.0,i)*(m_gpIIO->IsOn(m_rgusIBitAddress[i])) );
		}
		m_usCurValue = USHORT(dMountPressure * m_DAConverterParameter.m_dSlant + m_DAConverterParameter.m_dOffset);
	}
	else
	{
		for(int i=0; i<m_usOBitSize ; i++) 
		{
			m_usCurValue += (USHORT)( pow(2.0,i)*(m_gpIIO->IsOn(m_rgusOBitAddress[i])) );
		}
	}

	return m_usCurValue;
}



int MDAConverter::SetDigit(unsigned short val)
{
	unsigned short rgusRemainder[DEF_MAX_DACONVERTER_BIT];
	unsigned short usDivideValue = val; 
	memset(rgusRemainder, 0, sizeof(unsigned short)*DEF_MAX_DACONVERTER_BIT);

	if( val < 0 || val > DEF_MAX_DACONVERTER_VALUE)
	{
		//WriteErrorLog("InValid Parameter");
		SetErrorLevel(_T("DACONVERTER set Digit"),3, __FILE__, __LINE__);
		return generateErrorCode(205000+ERR_DACONVERTER_INVALID_VALUE);	
	}	

	int i;
	for(i=0; i<m_usOBitSize && usDivideValue>0; i++)
	{
		rgusRemainder[i] = usDivideValue % 2;
		usDivideValue = unsigned short(usDivideValue / 2);
	}

	for(i=0 ; i<m_usOBitSize ; i++) 
	{
		rgusRemainder[i] ? m_gpIIO->OutputOn(m_rgusOBitAddress[i]) : m_gpIIO->OutputOff(m_rgusOBitAddress[i]);
	}

	m_usCurValue = val;
	return DEF_DACONVERTER_SUCCESS;
}



/**
 * Assign component linkage
 * 
 * @param	pIO	: 참조할 IO Component Pointer
 */
int MDAConverter::AssignComponents(IIO *pIO)
{
	ASSERT( pIO != NULL );

	m_gpIIO = pIO;
	return ERR_DACONVERTER_SUCCESS;
}



/** 
 * Component Data 처리 
 *
 * @param	datComponent : 기록할 데이타
 * @return	Error : 0 = Success, 그외=기타
 */
int MDAConverter::SetData(SDAConverterData datComponent)
{
	m_iDAConverterID = datComponent.m_sDAConverterVal.m_iDAConverterID;

	m_strDAConverterName.Format(_T("%s"), datComponent.m_sDAConverterVal.m_szName);

	m_usOStarBit = datComponent.m_sDAConverterVal.m_usOStarBit;
	m_usOBitSize = datComponent.m_sDAConverterVal.m_usOBitSize;
	m_eDAConverterType = datComponent.m_sDAConverterVal.m_lnkEDAConverterType;

	m_usIStarBit = datComponent.m_sDAConverterVal.m_usIStarBit;
	m_usIBitSize = datComponent.m_sDAConverterVal.m_usIBitSize;

	m_strFileName = datComponent.m_strFileName;

	// Set BitAddres
	unsigned short uiOStartBit = m_usOStarBit;
	unsigned short uiIStartBit = m_usIStarBit;
	int i;
	for(i=0; i<m_usOBitSize; i++) m_rgusOBitAddress[i] = uiOStartBit++;
	for(i=0; i<m_usIBitSize; i++) m_rgusIBitAddress[i] = uiIStartBit++;

	return ERR_DACONVERTER_SUCCESS;
}


/** 
 * Component Data 읽어올 데이타 
 *
 * @param	datComponent : MDAConverterData Class에 대한 포인터
 * @return	Error : 0 = Success, 그외=기타
 */
int MDAConverter::GetData(SDAConverterData *datComponent)
{
	datComponent->m_sDAConverterVal.m_iDAConverterID = m_iDAConverterID;

//	datComponent->m_sDAConverterVal.m_szName.Format("%s", m_strDAConverterName);

	datComponent->m_sDAConverterVal.m_usOStarBit = m_usOStarBit;
	datComponent->m_sDAConverterVal.m_usOBitSize = m_usOBitSize;
	datComponent->m_sDAConverterVal.m_lnkEDAConverterType = m_eDAConverterType;

	datComponent->m_sDAConverterVal.m_usIStarBit = m_usIStarBit;
	datComponent->m_sDAConverterVal.m_usIBitSize = m_usIBitSize;

	datComponent->m_strFileName = m_strFileName;

	return ERR_DACONVERTER_SUCCESS;
}


/**
 * DAConverter 관련 Data를 File에서 읽어온다.
 *
 * @return	int (0 = Success, Error Code = 그 외)
 */
int MDAConverter::LoadParameter()
{
	BOOL bResult;

	MDAConverterData daData(m_strDAConverterName, m_strFileName);

	bResult = daData.ReadData();
	m_DAConverterParameter = daData;

	if (!bResult)
	{
		SetErrorLevel(_T("DACONVERTER load Parameter"),3, __FILE__, __LINE__);
		//WriteErrorLog("LoadParameter() : Reading Failure");
		return generateErrorCode(205000+ERR_DACONVERTER_FAIL_IN_LOADING_PARAM);
	}	

	return ERR_DACONVERTER_SUCCESS;
}



/**
 * DAConverter 관련 Data를 File에 저장한다.
 *
 * @param	pdaConverterData (저장할 Data)
 * @return	int (0 = Success, Error Code = 그 외)
 */
int MDAConverter::SaveParameter(MDAConverterData* pdaData)
{	
	BOOL bResult;

	MDAConverterData daData(m_strDAConverterName, m_strFileName);

	m_DAConverterParameter = *pdaData;

	daData =  m_DAConverterParameter;
	
	bResult = daData.WriteData();

	if (!bResult)
	{
		//WriteErrorLog("SaveParameter() : Writing Failure");
		SetErrorLevel(_T("DACONVERTER save Parameter"),3, __FILE__, __LINE__);
		return generateErrorCode(205000+ERR_DACONVERTER_FAIL_IN_SAVING_PARAM);
	}

	return ERR_DACONVERTER_SUCCESS;
}




/**
 * DAConverter 관련 Data를 얻어 온다.
 *
 * @param	pdaData (읽어올 Data가 저장될 변수)
 */
void MDAConverter::GetParameter(MDAConverterData* pdaData)
{
	*pdaData = m_DAConverterParameter;
}

/**
 * DAConverter 이름을 Return 한다.
 * @return : DAConverter Name
 */
CString MDAConverter::GetDAConverterName()
{
	return m_strDAConverterName;
}

/* End Of Code */
