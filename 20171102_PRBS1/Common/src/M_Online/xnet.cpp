// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "xnet.h"

/////////////////////////////////////////////////////////////////////////////
// CXNet

IMPLEMENT_DYNCREATE(CXNet, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CXNet properties

CString CXNet::GetIp()
{
	CString result;
	GetProperty(0x1, VT_BSTR, (void*)&result);
	return result;
}

void CXNet::SetIp(LPCTSTR propVal)
{
	SetProperty(0x1, VT_BSTR, propVal);
}

long CXNet::GetPort()
{
	long result;
	GetProperty(0x2, VT_I4, (void*)&result);
	return result;
}

void CXNet::SetPort(long propVal)
{
	SetProperty(0x2, VT_I4, propVal);
}

BOOL CXNet::GetActive()
{
	BOOL result;
	GetProperty(0x3, VT_BOOL, (void*)&result);
	return result;
}

void CXNet::SetActive(BOOL propVal)
{
	SetProperty(0x3, VT_BOOL, propVal);
}

BOOL CXNet::GetSpoolEnabled()
{
	BOOL result;
	GetProperty(0x4, VT_BOOL, (void*)&result);
	return result;
}

void CXNet::SetSpoolEnabled(BOOL propVal)
{
	SetProperty(0x4, VT_BOOL, propVal);
}

long CXNet::GetMaxSpoolSize()
{
	long result;
	GetProperty(0x5, VT_I4, (void*)&result);
	return result;
}

void CXNet::SetMaxSpoolSize(long propVal)
{
	SetProperty(0x5, VT_I4, propVal);
}

CString CXNet::GetSpoolDir()
{
	CString result;
	GetProperty(0x6, VT_BSTR, (void*)&result);
	return result;
}

void CXNet::SetSpoolDir(LPCTSTR propVal)
{
	SetProperty(0x6, VT_BSTR, propVal);
}

BOOL CXNet::GetLogEvent()
{
	BOOL result;
	GetProperty(0x7, VT_BOOL, (void*)&result);
	return result;
}

void CXNet::SetLogEvent(BOOL propVal)
{
	SetProperty(0x7, VT_BOOL, propVal);
}

BOOL CXNet::GetLogMesgSummary()
{
	BOOL result;
	GetProperty(0x8, VT_BOOL, (void*)&result);
	return result;
}

void CXNet::SetLogMesgSummary(BOOL propVal)
{
	SetProperty(0x8, VT_BOOL, propVal);
}

BOOL CXNet::GetLogMesgDetail()
{
	BOOL result;
	GetProperty(0x9, VT_BOOL, (void*)&result);
	return result;
}

void CXNet::SetLogMesgDetail(BOOL propVal)
{
	SetProperty(0x9, VT_BOOL, propVal);
}

BOOL CXNet::GetEstablished()
{
	BOOL result;
	GetProperty(0xa, VT_BOOL, (void*)&result);
	return result;
}

void CXNet::SetEstablished(BOOL propVal)
{
	SetProperty(0xa, VT_BOOL, propVal);
}

long CXNet::GetSendTimeout()
{
	long result;
	GetProperty(0xb, VT_I4, (void*)&result);
	return result;
}

void CXNet::SetSendTimeout(long propVal)
{
	SetProperty(0xb, VT_I4, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CXNet operations

long CXNet::SendString(LPCTSTR szStrVal, long nLen)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		szStrVal, nLen);
	return result;
}

CString CXNet::GetString(long lMsgID)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xd, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		lMsgID);
	return result;
}

long CXNet::Start()
{
	long result;
	InvokeHelper(0xe, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CXNet::Stop()
{
	long result;
	InvokeHelper(0xf, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CXNet::PurgeSpool()
{
	long result;
	InvokeHelper(0x10, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CXNet::GetBinary(long lMsgID, short* pByteBuff, long nBuffCount)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_PI2 VTS_I4;
	InvokeHelper(0x11, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		lMsgID, pByteBuff, nBuffCount);
	return result;
}

long CXNet::SendBinary(short* pByteBuff, long nCount)
{
	long result;
	static BYTE parms[] =
		VTS_PI2 VTS_I4;
	InvokeHelper(0x12, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		pByteBuff, nCount);
	return result;
}

long CXNet::GetLastError()
{
	long result;
	InvokeHelper(0x13, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

CString CXNet::GetLastErrorString()
{
	CString result;
	InvokeHelper(0x14, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

CString CXNet::GetErrorString(long nError)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x15, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		nError);
	return result;
}

void CXNet::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
