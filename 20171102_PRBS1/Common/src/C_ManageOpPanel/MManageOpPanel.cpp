/* Generated by Together */

#include "stdafx.h"

#include "MManageOpPanel.h"
#include "MOpPanel.h"
#include "MSystemData.h"

#include "common.h"
//20110222 SJ_HJG
#include "MTowerLampData.h"
#include "MPlatformOlbSystem.h"
extern MPlatformOlbSystem	MOlbSystemPre;

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif

/***********************************************************************************************
/*
/* 생성자 & 소멸자
/*
/************************************************************************************************/

/** Default 생성자 */
MManageOpPanel::MManageOpPanel()
{
	/** Blink Rate */
	m_dBlinkRate = DEF_MNGOPPANEL_BLINK_RATE;

	/** Jog로 이동할 Motion에 대한 정보 Index */
	m_iJogIndex = DEF_MNGOPPANEL_JOG_NO_USE;

	/** OpPanel Component Pointer Parameter */
	m_plnkOpPanel = NULL;

	/** System Data Link Pointer */
	m_plnkSystemData = NULL;

	//20110223 SJ_HJG
	m_plnkTowerLampData	= NULL;
	
	/** Blink Interval 계산을 위한 변수 */
	m_bBlinkState = FALSE;

	m_bBuzzerMode = TRUE;

	/** Jog Key 이전 값 저장 용 변수 */
	m_iPrevJogVal_X = DEF_MNGOPPANEL_NON_KEY;
	m_iPrevJogVal_Y = DEF_MNGOPPANEL_NON_KEY;
	m_iPrevJogVal_T = DEF_MNGOPPANEL_NON_KEY;
	m_iPrevJogVal_Z = DEF_MNGOPPANEL_NON_KEY;

	m_bPrevDir_X = DEF_MNGOPPANEL_POSITIVE_DIR;
	m_bPrevDir_Y = DEF_MNGOPPANEL_POSITIVE_DIR;
	m_bPrevDir_T = DEF_MNGOPPANEL_POSITIVE_DIR;
	m_bPrevDir_Z = DEF_MNGOPPANEL_POSITIVE_DIR;

#ifdef SIMULATION
	/** Simulation Switch */
	m_bSimulationStartSW = FALSE;
	m_bSimulationStopSW = FALSE;
	m_bSimulationResetSW = FALSE;
#endif
}

/** Standard 생성자 */
MManageOpPanel::MManageOpPanel(	SCommonAttribute commonData,
							   	IOpPanel *pOpPanel,
								MSystemData *pSystemData)
: ICommon(commonData)
{
	/** Blink Rate */
	m_dBlinkRate		= DEF_MNGOPPANEL_BLINK_RATE;

	/** Jog로 이동할 Motion에 대한 정보 Index */
	m_iJogIndex			= DEF_MNGOPPANEL_JOG_NO_USE;

	/** OpPanel Component Pointer Parameter */
	m_plnkOpPanel		= pOpPanel;

	/** System Data Link Pointer */
	m_plnkSystemData	= pSystemData;	

	/** Blink Interval 계산을 위한 변수 */
	m_bBlinkState		= FALSE;

	m_bBuzzerMode		= TRUE;

	//20110223 SJ_HJG
	m_plnkTowerLampData	= MOlbSystemPre.GetTowerLampData();

	/** Blink를 위한 Timer 시작 */
	m_BlinkTimer.StartTimer();

	/** Jog Key 이전 값 저장 용 변수 */
	m_iPrevJogVal_X		= DEF_MNGOPPANEL_NON_KEY;
	m_iPrevJogVal_Y		= DEF_MNGOPPANEL_NON_KEY;
	m_iPrevJogVal_T		= DEF_MNGOPPANEL_NON_KEY;
	m_iPrevJogVal_Z		= DEF_MNGOPPANEL_NON_KEY;

	m_bPrevDir_X		= DEF_MNGOPPANEL_POSITIVE_DIR;
	m_bPrevDir_Y		= DEF_MNGOPPANEL_POSITIVE_DIR;
	m_bPrevDir_T		= DEF_MNGOPPANEL_POSITIVE_DIR;
	m_bPrevDir_Z		= DEF_MNGOPPANEL_POSITIVE_DIR;

#ifdef SIMULATION
	/** Simulation Switch */
	m_bSimulationStartSW = FALSE;
	m_bSimulationStopSW = FALSE;
	m_bSimulationResetSW = FALSE;
#endif
}

/** 소멸자 */
MManageOpPanel::~MManageOpPanel()
{
}

/***********************************************************************************************
/*
/* Component 공통 제공 Interface
/*
/************************************************************************************************/ 

/**
 * OpPanel Component Object를 설정한다. 
 *
 * @param	*pOpPanel : 설정할 OpPanel Component Object Pointer
 */
void MManageOpPanel::AssignComponents(IOpPanel *pOpPanel)
{
	ASSERT(pOpPanel != NULL);

	/** OpPanel Component Pointer Parameter */
	m_plnkOpPanel = pOpPanel;
}

/**
 *  운전 초기 상태로 설정된다.
 *
 * @return	Error Code : 0 = SUCCESS, 그 외 = Error
 */
int MManageOpPanel::Initialize()
{
	return ERR_MNGOPPANEL_SUCCESS;
}

/***********************************************************************************************
/*
/* 안전 센서 체크
/*
/************************************************************************************************/ 

/**
 * Door Sensor 점검여부를 설정한다.
 *
 * @param	bFlag : 점검 여부 (TRUE:점검, FALSE:무시)
 * @param	iGroup : (OPTION=-1) Door Sensor Group 번호 (-1이면 모든 Group내 설정)
 * @param	iIndex : Door Snesor Group 내 Index 번호 (-1이면 Group내 모든 Index 설정)
 */
void MManageOpPanel::SetDoorCheckFlag(BOOL bFlag, int iGourp/*=-1*/, int iIndex/*=-1*/)
{
	m_plnkOpPanel->SetDoorCheckFlag(bFlag, iGourp, iIndex);
}


void MManageOpPanel::SetMaterialChangeFlag(BOOL bFlag, int iGroup/*= -1*/, int iIndex/* = -1*/)
{
	m_plnkOpPanel->SetMaterialChangeFlag(bFlag, iGroup, iIndex);
}

/***********************************************************************************************
/*
/* Switch 상태 확인
/*
/************************************************************************************************/ 

/**
 * Start Switch의 눌린 상태 읽어온다.
 *
 * @param	*pbStatus : Start Switch 눌린 상태 (TRUE:ON, FALSE:OFF)
 * @return	Error Code : 0=SUCCESS, 그 외=Error
 */
BOOL MManageOpPanel::GetStartSWStatus()
{
#ifdef SIMULATION
	return m_bSimulationStartSW;
#endif

	/** Start Switch 눌린 상태 읽기 */
	return m_plnkOpPanel->GetStartButtonStatus();
}

/**
 * Stop Switch의 눌린 상태 읽어온다.
 *
 * @param	*pbStatus : Stop Switch 눌린 상태 (TRUE:ON, FALSE:OFF)
 * @return	Error Code : 0=SUCCESS, 그 외=Error
 */
BOOL MManageOpPanel::GetStopSWStatus()
{
#ifdef SIMULATION
	return m_bSimulationStopSW;
#endif

	/** Stop Switch 눌린 상태 읽기 */
	return m_plnkOpPanel->GetStopButtonStatus();
}

/**
 * E-Stop Switch의 눌린 상태 읽어온다.
 *
 * @param	*pbStatus : E-Stop Switch 눌린 상태 (TRUE:ON, FALSE:OFF)
 * @return	Error Code : 0=SUCCESS, 그 외=Error
 */
BOOL MManageOpPanel::GetEStopSWStatus()
{
	/** E-Stop Switch 눌린 상태 읽기 */
	return m_plnkOpPanel->GetEStopButtonStatus();
}

/**
 * Teaching Pendant 사용 상태를 읽어온다.
 *
 * @return	Error Code : 0=SUCCESS, 그 외=Error
 */
BOOL MManageOpPanel::GetTPStatus()
{
	return m_plnkOpPanel->GetTPStatus();
}

/**
 * Reset Switch의 눌린 상태 읽어온다.
 *
 * @param	*pbStatus : Reset Switch 눌린 상태 (TRUE:ON, FALSE:OFF)
 * @return	Error Code : 0=SUCCESS, 그 외=Error
 */
int MManageOpPanel::GetResetSWStatus()
{
#ifdef SIMULATION
	return m_bSimulationResetSW;
#endif

	/** Reset Switch 눌린 상태 읽기 */
	return m_plnkOpPanel->GetResetButtonStatus();
}

/**
 * Door의 상태를 읽어온다.
 *
 * @return	: Door 상태 (TRUE:OPEN, FALSE:CLOSE)
 */
BOOL MManageOpPanel::GetDoorSWStatus()
{
#ifdef SIMULATION
	return FALSE;
#endif
	return m_plnkOpPanel->GetSafeDoorStatus();
}

/***********************************************************************************************
/*
/* OpPanel (Operation Panel) 제어
/*
/************************************************************************************************/ 

/**
 * Tower Lamp Blink 속도 설정하기
 *
 * @param	dRate : (OPTION=0.5) 설정할 Blink 속도
 */
void MManageOpPanel::SetBlinkRate(double dRate)
{
	/** Blink Rate */
	m_dBlinkRate = dRate;
}

/**
 * OpPanel의 Switch 및 Tower Lamp의 On/Off를 지시한다.
 *
 * @param	iState : On/Off Mode
 *
 *		No	define			description				Start	Stop	TowerR	TowerY	TowerG	Buzzer
 *		1 : STEPSTOP		Step Stop 완료, Manual	 X		 O		 X		 O		 X		 X
 *		2 : START			Start(Run Ready)		 X		 X		 X		 X		 O		 X
 *		3 : RUN				Run 상태				 O		 X		 X		 X		 O		 X
 *		4 : STEPSTOP_ING	Step Stop 진행			 X		 O		 X		 O		 O		 X
 *		5 : ERRORSTOP_ING	Error Stop 진행			 O		 X		 B		 X		 O		 O
 *		6 : ESTOP_ING		Emergency Stop 진행		 O		 X		 O		 X		 O		 O	// 사용 안함.	// selsk_jdy 삭제 예정.
 *		7 : CYCLESTOP_ING	Cycle Stop 진행			 O		 X		 X		 X		 B		 X
 *		8 : OP_CALL			Operator Call			 O		 X		 B		 B		 B		 O
 *		9 : PARTSEMPTY		Parts Empty				 O		 X		 X		 B		 O		 O
 *													 O		 X		 B		 B		 B		 O	// SELSK : Buzzer Off 가능.
 *		10: PANELEMPTY		Panel Empty				 O		 X		 O		 B		 X		 X	// SELSK only.

 // NSMC
 *      11:AUTO_MODEL_CHANGE AutoModelChange 진행 상태   O      X         B      B       O       O
 *
 * @return	Error Code : 0 = SUCCESS, 그 외 = Error
 */
ErrorInfo MManageOpPanel::SetOpPanel(int iState)
{
	int iResult = ERR_MNGOPPANEL_SUCCESS;

	if (TRUE == m_plnkSystemData->m_bUseVIPMode)
		iState = DEF_MNGOPPANEL_RUN;

	/** Blink Interval 계산 */
	if (m_BlinkTimer.MoreThan(m_dBlinkRate) == TRUE)
	{
		/** Blink 반전 */
		m_bBlinkState = !m_bBlinkState;
		/** Timer 재기동 */
		m_BlinkTimer.StartTimer();
	}

	/* Switch LED 및 Tower Lamp의 On/Off Mode에 따라 동작 */
	switch (iState)
	{
		/** Step Stop 진행 상태 */
	case DEF_MNGOPPANEL_STEPSTOP_ING:
		/** Start Switch LED Off */
		if ((iResult = m_plnkOpPanel->SetStartLamp(m_plnkTowerLampData->m_bUseStartLamp_StepStop)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		/** Step Stop Switch LED On */
		if ((iResult = m_plnkOpPanel->SetStopLamp(m_plnkTowerLampData->m_bUseStopLamp_StepStop)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		/** Tower Lamp Red Lamp Off */
		if ((iResult = m_plnkOpPanel->SetTowerRedLamp(m_plnkTowerLampData->m_bUseRedLamp_StepStop)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		/** Tower Lamp Yellow Lamp On */
		if ((iResult = m_plnkOpPanel->SetTowerYellowLamp(m_plnkTowerLampData->m_bUseYellowLamp_StepStop)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		/** Tower Lamp Green Lamp On */
		if ((iResult = m_plnkOpPanel->SetTowerGreenLamp(m_plnkTowerLampData->m_bUseGreenLamp_StepStop)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		/** Tower Lamp Buzzer Off */
		if ((iResult = m_plnkOpPanel->SetBuzzerStatus(DEF_OPPANEL_BUZZER_ALL, FALSE)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		break;

		/** Step Stop 완료 상태 */
	case DEF_MNGOPPANEL_STEPSTOP:
		/** Start Switch LED Off */
		if ((iResult = m_plnkOpPanel->SetStartLamp(m_plnkTowerLampData->m_bUseStartLamp_StepStop)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		/** Step Stop Switch LED On */
		if ((iResult = m_plnkOpPanel->SetStopLamp(m_plnkTowerLampData->m_bUseStopLamp_StepStop)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		/** Tower Lamp Red Lamp Off */
		if ((iResult = m_plnkOpPanel->SetTowerRedLamp(m_plnkTowerLampData->m_bUseRedLamp_StepStop)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		/** Tower Lamp Yellow Lamp On */
		if ((iResult = m_plnkOpPanel->SetTowerYellowLamp(m_plnkTowerLampData->m_bUseYellowLamp_StepStop)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		/** Tower Lamp Green Lamp Off */
		if ((iResult = m_plnkOpPanel->SetTowerGreenLamp(m_plnkTowerLampData->m_bUseGreenLamp_StepStop)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		/** Tower Lamp Buzzer Off */
		if ((iResult = m_plnkOpPanel->SetBuzzerStatus(DEF_OPPANEL_BUZZER_ALL, FALSE)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		break;

		/** Cycle Stop 진행 상태 */
	case DEF_MNGOPPANEL_CYCLESTOP_ING:
		/** Start Switch LED On */
		if ((iResult = m_plnkOpPanel->SetStartLamp(TRUE)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		/** Step Stop Switch LED Off */
		if ((iResult = m_plnkOpPanel->SetStopLamp(FALSE)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		/** Tower Lamp Red Lamp Off */
		if ((iResult = m_plnkOpPanel->SetTowerRedLamp(FALSE)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		/** Tower Lamp Yellow Lamp Off */
		if ((iResult = m_plnkOpPanel->SetTowerYellowLamp(FALSE)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		/** Tower Lamp Green Lamp Blink */
		if ((iResult = m_plnkOpPanel->SetTowerGreenLamp(TRUE)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		/** Tower Lamp Buzzer Off */
		if ((iResult = m_plnkOpPanel->SetBuzzerStatus(DEF_OPPANEL_BUZZER_ALL, FALSE)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		break;

		/** Error Stop 진행 상태 */
	case DEF_MNGOPPANEL_ERRORSTOP_ING:
		/** Start Switch LED On */
		if ((iResult = m_plnkOpPanel->SetStartLamp(m_plnkTowerLampData->m_bUseStartLamp_ErroeStop)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		/** Step Stop Switch LED Off */
		if ((iResult = m_plnkOpPanel->SetStopLamp(m_plnkTowerLampData->m_bUseStopLamp_ErroeStop)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		/** Tower Lamp Red Lamp On */
		if ((iResult = m_plnkOpPanel->SetTowerRedLamp(m_plnkTowerLampData->m_bUseRedLamp_ErroeStop)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		/** Tower Lamp Yellow Lamp Off */
		if ((iResult = m_plnkOpPanel->SetTowerYellowLamp(m_plnkTowerLampData->m_bUseYellowLamp_ErroeStop)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		/** Tower Lamp Green Lamp Off */
		if ((iResult = m_plnkOpPanel->SetTowerGreenLamp(m_plnkTowerLampData->m_bUseGreenLamp_ErroeStop)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		/** Tower Lamp Buzzer On */
		if ((iResult = m_plnkOpPanel->SetBuzzerStatus(DEF_OPPANEL_BUZZER_K4, IsBuzzerMode())) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		break;

		/** Start (Run Ready) 상태 */
	case DEF_MNGOPPANEL_START:
		/** Start Switch LED Off */
		if ((iResult = m_plnkOpPanel->SetStartLamp(FALSE)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		/** Step Stop Switch LED Off */
		if ((iResult = m_plnkOpPanel->SetStopLamp(FALSE)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		/** Tower Lamp Red Lamp Off */
		if ((iResult = m_plnkOpPanel->SetTowerRedLamp(FALSE)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		/** Tower Lamp Yellow Lamp Off */
		if ((iResult = m_plnkOpPanel->SetTowerYellowLamp(FALSE)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		/** Tower Lamp Green Lamp On */
		if ((iResult = m_plnkOpPanel->SetTowerGreenLamp(TRUE)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		/** Tower Lamp Buzzer Off */
		if ((iResult = m_plnkOpPanel->SetBuzzerStatus(DEF_OPPANEL_BUZZER_ALL, FALSE)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		break;

		/** Run 상태 */
	case DEF_MNGOPPANEL_RUN:
		/** Start Switch LED On */
		if ((iResult = m_plnkOpPanel->SetStartLamp(m_plnkTowerLampData->m_bUseStartLamp_NomalRun)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		/** Step Stop Switch LED Off */
		if ((iResult = m_plnkOpPanel->SetStopLamp(m_plnkTowerLampData->m_bUseStopLamp_NomalRun)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		/** Tower Lamp Red Lamp Off */
		if ((iResult = m_plnkOpPanel->SetTowerRedLamp(m_plnkTowerLampData->m_bUseRedLamp_NomalRun)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		/** Tower Lamp Yellow Lamp Off */
		if ((iResult = m_plnkOpPanel->SetTowerYellowLamp(m_plnkTowerLampData->m_bUseYellowLamp_NomalRun)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		/** Tower Lamp Green Lamp On */
		if ((iResult = m_plnkOpPanel->SetTowerGreenLamp(m_plnkTowerLampData->m_bUseGreenLamp_NomalRun)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		/** Tower Lamp Buzzer Off */
		if ((iResult = m_plnkOpPanel->SetBuzzerStatus(DEF_OPPANEL_BUZZER_ALL, FALSE)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		break;

#ifdef DEF_SELSK_SITE	// 임시.
		/** Parts Empty 상태 */
	case DEF_MNGOPPANEL_PARTSEMPTY:
		/** Fall Through */
#endif
		/** Operator Call 상태 */
	case DEF_MNGOPPANEL_OP_CALL:
		/** Start Switch LED On */
		if ((iResult = m_plnkOpPanel->SetStartLamp(m_plnkTowerLampData->m_bUseStartLamp_OPCall)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		/** Step Stop Switch LED Off */
		if ((iResult = m_plnkOpPanel->SetStopLamp(m_plnkTowerLampData->m_bUseStopLamp_OPCall)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;

		if(m_plnkTowerLampData->m_bUseRedLamp_OPCall == 2)
		{
			/** Tower Lamp Red Lamp Blink */
			if ((iResult = m_plnkOpPanel->SetTowerRedLamp(m_bBlinkState)) != ERR_MNGOPPANEL_SUCCESS)
				return iResult;

		}
		else
		{
			if ((iResult = m_plnkOpPanel->SetTowerRedLamp(m_plnkTowerLampData->m_bUseRedLamp_OPCall)) != ERR_MNGOPPANEL_SUCCESS)
				return iResult;
		}

		if(m_plnkTowerLampData->m_bUseYellowLamp_OPCall == 2)
		{
			/** Tower Lamp Yellow Lamp Blink */
			if ((iResult = m_plnkOpPanel->SetTowerYellowLamp(m_bBlinkState)) != ERR_MNGOPPANEL_SUCCESS)
				return iResult;
		}
		else
		{
			if ((iResult = m_plnkOpPanel->SetTowerYellowLamp(m_plnkTowerLampData->m_bUseYellowLamp_OPCall)) != ERR_MNGOPPANEL_SUCCESS)
				return iResult;
		}

		if(m_plnkTowerLampData->m_bUseYellowLamp_OPCall == 2)
		{
			/** Tower Lamp Green Lamp Blink */
			if ((iResult = m_plnkOpPanel->SetTowerGreenLamp(m_bBlinkState)) != ERR_MNGOPPANEL_SUCCESS)
				return iResult;
		}
		else
		{
			if ((iResult = m_plnkOpPanel->SetTowerGreenLamp(m_plnkTowerLampData->m_bUseGreenLamp_OPCall)) != ERR_MNGOPPANEL_SUCCESS)
				return iResult;
		}
		/** Tower Lamp Buzzer On */
		if ((iResult = m_plnkOpPanel->SetBuzzerStatus(DEF_OPPANEL_BUZZER_K2, IsBuzzerMode())) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		break;

//#ifndef DEF_SELSK_SITE
		/** Parts Empty 상태 */
	case DEF_MNGOPPANEL_PARTSEMPTY:
		/** Start Switch LED On */
		if ((iResult = m_plnkOpPanel->SetStartLamp(m_plnkTowerLampData->m_bUseStartLamp_MaterialChange)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		/** Step Stop Switch LED Off */
		if ((iResult = m_plnkOpPanel->SetStopLamp(m_plnkTowerLampData->m_bUseStopLamp_MaterialChange)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		/** Tower Lamp Red Lamp Off */
		if ((iResult = m_plnkOpPanel->SetTowerRedLamp(m_plnkTowerLampData->m_bUseRedLamp_MaterialChange)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		/** Tower Lamp Yellow Lamp Blink */
		if ((iResult = m_plnkOpPanel->SetTowerYellowLamp(m_plnkTowerLampData->m_bUseYellowLamp_MaterialChange)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		/** Tower Lamp Green Lamp On */
		if ((iResult = m_plnkOpPanel->SetTowerGreenLamp(m_plnkTowerLampData->m_bUseGreenLamp_MaterialChange)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		/** Tower Lamp Buzzer On */
		if ((iResult = m_plnkOpPanel->SetBuzzerStatus(DEF_OPPANEL_BUZZER_K2, IsBuzzerMode())) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		break;
//#endif

//#ifdef DEF_SELSK_SITE
		/** Panel 공급 지연 상태 */
	case DEF_MNGOPPANEL_PANELEMPTY:
		/** Start Switch LED On */
		if ((iResult = m_plnkOpPanel->SetStartLamp(m_plnkTowerLampData->m_bUseStartLamp_PanelEmpty)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		/** Step Stop Switch LED Off */
		if ((iResult = m_plnkOpPanel->SetStopLamp(m_plnkTowerLampData->m_bUseStopLamp_PanelEmpty)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		/** Tower Lamp Red Lamp Off */
		if ((iResult = m_plnkOpPanel->SetTowerRedLamp(m_plnkTowerLampData->m_bUseRedLamp_PanelEmpty)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		/** Tower Lamp Yellow Lamp Blink */
		if ((iResult = m_plnkOpPanel->SetTowerYellowLamp(m_plnkTowerLampData->m_bUseYellowLamp_PanelEmpty)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		/** Tower Lamp Green Lamp On */
		if ((iResult = m_plnkOpPanel->SetTowerGreenLamp(m_plnkTowerLampData->m_bUseGreenLamp_PanelEmpty)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		/** Tower Lamp Buzzer Off */
		if ((iResult = m_plnkOpPanel->SetBuzzerStatus(DEF_OPPANEL_BUZZER_ALL, FALSE)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		break;

	/** Panel 배출 지연 상태 */
	case DEF_MNGOPPANEL_PANELFULL:
		/** Start Switch LED On */
		if ((iResult = m_plnkOpPanel->SetStartLamp(m_plnkTowerLampData->m_bUseStartLamp_MaterialChange)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		/** Step Stop Switch LED Off */
		if ((iResult = m_plnkOpPanel->SetStopLamp(m_plnkTowerLampData->m_bUseStopLamp_MaterialChange)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		/** Tower Lamp Red Lamp Off */
		if ((iResult = m_plnkOpPanel->SetTowerRedLamp(m_plnkTowerLampData->m_bUseRedLamp_MaterialChange)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		/** Tower Lamp Yellow Lamp Blink */
		if ((iResult = m_plnkOpPanel->SetTowerYellowLamp(m_plnkTowerLampData->m_bUseYellowLamp_MaterialChange)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		/** Tower Lamp Green Lamp On */
		if ((iResult = m_plnkOpPanel->SetTowerGreenLamp(m_plnkTowerLampData->m_bUseGreenLamp_MaterialChange)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		/** Tower Lamp Buzzer Off */
		if ((iResult = m_plnkOpPanel->SetBuzzerStatus(DEF_OPPANEL_BUZZER_ALL, FALSE)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		break;
//#endif

	// NSMC JDY : Auto M/C
	case DEF_MNGOPPANEL_AUTO_MODEL_CHANGE:
		/** Start Switch LED On */
		if ((iResult = m_plnkOpPanel->SetStartLamp(TRUE)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		/** Step Stop Switch LED Off */
		if ((iResult = m_plnkOpPanel->SetStopLamp(FALSE)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		/** Tower Lamp Red Lamp Blink */
		if ((iResult = m_plnkOpPanel->SetTowerRedLamp(TRUE)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		/** Tower Lamp Yellow Lamp Blink */
		if ((iResult = m_plnkOpPanel->SetTowerYellowLamp(TRUE)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		/** Tower Lamp Green Lamp On */
		if ((iResult = m_plnkOpPanel->SetTowerGreenLamp(TRUE)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		/** Tower Lamp Buzzer On */
//		if ((iResult = m_plnkOpPanel->SetBuzzerStatus(DEF_OPPANEL_BUZZER_K1, TRUE)) != ERR_MNGOPPANEL_SUCCESS)
//			return iResult;
		break;

		// hongju_SESL // Panel In Stop이 눌러 졌을때.. 녹색만 BlankState..
	case DEF_MNGOPPANEL_PANEL_IN_STOP:
		/** Start Switch LED On */
		if ((iResult = m_plnkOpPanel->SetStartLamp(TRUE)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		/** Step Stop Switch LED Off */
		if ((iResult = m_plnkOpPanel->SetStopLamp(FALSE)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		/** Tower Lamp Red Lamp Blink */
//		if ((iResult = m_plnkOpPanel->SetTowerRedLamp(m_bBlinkState)) != ERR_MNGOPPANEL_SUCCESS)
//			return iResult;
		/** Tower Lamp Yellow Lamp Blink */
//		if ((iResult = m_plnkOpPanel->SetTowerYellowLamp(m_bBlinkState)) != ERR_MNGOPPANEL_SUCCESS)
//			return iResult;
		/** Tower Lamp Green Lamp On */
		if ((iResult = m_plnkOpPanel->SetTowerGreenLamp(TRUE)) != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
		/** Tower Lamp Buzzer On */
//		if ((iResult = m_plnkOpPanel->SetBuzzerStatus(DEF_OPPANEL_BUZZER_K1, TRUE)) != ERR_MNGOPPANEL_SUCCESS)
//			return iResult;
		break;


	default:
		return generateErrorCode(300001);
	}

	return ERR_MNGOPPANEL_SUCCESS;
}

/** 
 * Buzzer Mode를 Set 한다.
 * @param BOOL : TRUE = Buzzer Mode, FALSE = Buzzer Off Mode
 */
void MManageOpPanel::SetBuzzerMode(BOOL bMode)
{
	m_bBuzzerMode = bMode;
}

/** 
 * Buzzer Mode를 반환 한다.
 * @return BOOL : TRUE = Buzzer Mode, FALSE = Buzzer Off Mode
 */
BOOL MManageOpPanel::IsBuzzerMode()
{
	if (TRUE == m_plnkSystemData->m_bUseBuzzer)
		return m_bBuzzerMode;

	return FALSE;
}

/***********************************************************************************************
/*
/* Jog Operation
/*
/************************************************************************************************/ 

/**
 * Jog Key 확인하여 해당 Jog 축을 이동/정지한다.
 *
 * @return	Error Code : 0=SUCCESS, 그 외=Error
 */
int MManageOpPanel::MoveJog(void)
{
	int iResult = ERR_MNGOPPANEL_SUCCESS;

	/** Jog Key 값 변수 */
	BOOL bXpStatus = FALSE;
	BOOL bXnStatus = FALSE;
	BOOL bYpStatus = FALSE;
	BOOL bYnStatus = FALSE;
	BOOL bTpStatus = FALSE;
	BOOL bTnStatus = FALSE;
	BOOL bZpStatus = FALSE;
	BOOL bZnStatus = FALSE;

	/** Jog Key Check */
	/** X(+) Key Read */
	bXpStatus = m_plnkOpPanel->GetJogXPlusButtonStatus();
	/** X(-) Key Read */
	bXnStatus = m_plnkOpPanel->GetJogXMinusButtonStatus();
	/** Y(+) Key Read */
	bYpStatus = m_plnkOpPanel->GetJogYPlusButtonStatus();
	/** Y(-) Key Read */
	bYnStatus = m_plnkOpPanel->GetJogYMinusButtonStatus();
	/** T(+) Key Read */
	bTpStatus = m_plnkOpPanel->GetJogTPlusButtonStatus();
	/** T(-) Key Read */
	bTnStatus = m_plnkOpPanel->GetJogTMinusButtonStatus();
	/** Z(+) Key Read */
	bZpStatus = m_plnkOpPanel->GetJogZPlusButtonStatus();
	/** Z(-) Key Read */
	bZnStatus = m_plnkOpPanel->GetJogZMinusButtonStatus();

	/** 이동 모드이면 Jog 이동 */
	if (m_iJogIndex > DEF_MNGOPPANEL_JOG_NO_USE)
	{
		/** X(+) Slow 이동 */
		if (bXpStatus && !bXnStatus)
		{
			/** 처음 눌리는 것이면 */
			if (m_iPrevJogVal_X != DEF_MNGOPPANEL_POS_KEY)
			{
				m_iPrevJogVal_X = DEF_MNGOPPANEL_POS_KEY;
				m_bPrevDir_X = DEF_MNGOPPANEL_POSITIVE_DIR;
				m_plnkOpPanel->StopJog(m_iJogIndex, DEF_MNGOPPANEL_JOG_X_KEY);
				/** X(+) 방향으로 Slow 이동 실시 */
				iResult = m_plnkOpPanel->MoveJogSlow(m_iJogIndex, DEF_MNGOPPANEL_JOG_X_KEY, DEF_MNGOPPANEL_POSITIVE_DIR);
				if(iResult != ERR_OPPANEL_SUCCESS)
					return iResult;
			}
		}
		/** X(-) Slow 이동 */
		else if (!bXpStatus && bXnStatus)
		{
			/** 처음 눌리는 것이면 */
			if (m_iPrevJogVal_X != DEF_MNGOPPANEL_POS_KEY)
			{
				m_iPrevJogVal_X = DEF_MNGOPPANEL_POS_KEY;
				m_bPrevDir_X = DEF_MNGOPPANEL_NEGATIVE_DIR;
				m_plnkOpPanel->StopJog(m_iJogIndex, DEF_MNGOPPANEL_JOG_X_KEY);
				/** X(-) 방향으로 Slow 이동 실시 */
				iResult = m_plnkOpPanel->MoveJogSlow(m_iJogIndex, DEF_MNGOPPANEL_JOG_X_KEY, DEF_MNGOPPANEL_NEGATIVE_DIR);
				if(iResult != ERR_OPPANEL_SUCCESS)
					return iResult;
			}
		}
		/** X(+/-) Fast 이동 */
		else if (bXpStatus && bXnStatus)
		{
			/** 처음 눌리는 것이면 */
			if (m_iPrevJogVal_X != DEF_MNGOPPANEL_ALL_KEY)
			{
				m_iPrevJogVal_X = DEF_MNGOPPANEL_ALL_KEY;
				m_plnkOpPanel->StopJog(m_iJogIndex, DEF_MNGOPPANEL_JOG_X_KEY);
				/** X(+/) 방향으로 Fast 이동 실시 */
				iResult = m_plnkOpPanel->MoveJogFast(m_iJogIndex, DEF_MNGOPPANEL_JOG_X_KEY, m_bPrevDir_X);
				if(iResult != ERR_OPPANEL_SUCCESS)
					return iResult;
			}
		}
		/** 아무 것도 안 눌렸을 때 */
		else
		{
			/** 처음 안 눌리는 것이면 */
			if (m_iPrevJogVal_X != DEF_MNGOPPANEL_NON_KEY)
			{
				m_iPrevJogVal_X = DEF_MNGOPPANEL_NON_KEY;
				m_plnkOpPanel->StopJog(m_iJogIndex, DEF_MNGOPPANEL_JOG_X_KEY);
			}
		}

		/** Y(+) Slow 이동 */
		if (bYpStatus && !bYnStatus)
		{
			/** 처음 눌리는 것이면 */
			if (m_iPrevJogVal_Y != DEF_MNGOPPANEL_POS_KEY)
			{
				m_iPrevJogVal_Y = DEF_MNGOPPANEL_POS_KEY;
				m_bPrevDir_Y = DEF_MNGOPPANEL_POSITIVE_DIR;
				m_plnkOpPanel->StopJog(m_iJogIndex, DEF_MNGOPPANEL_JOG_Y_KEY);
				/** Y(+) 방향으로 Slow 이동 실시 */
				iResult = m_plnkOpPanel->MoveJogSlow(m_iJogIndex, DEF_MNGOPPANEL_JOG_Y_KEY, DEF_MNGOPPANEL_POSITIVE_DIR);
				if(iResult != ERR_OPPANEL_SUCCESS)
					return iResult;
			}
		}
		/** Y(-) Slow 이동 */
		else if (!bYpStatus && bYnStatus)
		{
			/** 처음 눌리는 것이면 */
			if (m_iPrevJogVal_Y != DEF_MNGOPPANEL_POS_KEY)
			{
				m_iPrevJogVal_Y = DEF_MNGOPPANEL_POS_KEY;
				m_bPrevDir_Y = DEF_MNGOPPANEL_NEGATIVE_DIR;
				m_plnkOpPanel->StopJog(m_iJogIndex, DEF_MNGOPPANEL_JOG_Y_KEY);
				/** Y(-) 방향으로 Slow 이동 실시 */
				iResult = m_plnkOpPanel->MoveJogSlow(m_iJogIndex, DEF_MNGOPPANEL_JOG_Y_KEY, DEF_MNGOPPANEL_NEGATIVE_DIR);
				if(iResult != ERR_OPPANEL_SUCCESS)
					return iResult;
			}
		}
		/** Y(+/-) Fast 이동 */
		else if (bYpStatus && bYnStatus)
		{
			/** 처음 눌리는 것이면 */
			if (m_iPrevJogVal_Y != DEF_MNGOPPANEL_ALL_KEY)
			{
				m_iPrevJogVal_Y = DEF_MNGOPPANEL_ALL_KEY;
				m_plnkOpPanel->StopJog(m_iJogIndex, DEF_MNGOPPANEL_JOG_Y_KEY);
				Sleep(100);
				/** Y(+/) 방향으로 Fast 이동 실시 */
				iResult = m_plnkOpPanel->MoveJogFast(m_iJogIndex, DEF_MNGOPPANEL_JOG_Y_KEY, m_bPrevDir_Y);
				if(iResult != ERR_OPPANEL_SUCCESS)
					return iResult;
			}
		}
		/** 아무 것도 안 눌렸을 때 */
		else
		{
			/** 처음 안 눌리는 것이면 */
			if (m_iPrevJogVal_Y != DEF_MNGOPPANEL_NON_KEY)
			{
				m_iPrevJogVal_Y = DEF_MNGOPPANEL_NON_KEY;
				m_plnkOpPanel->StopJog(m_iJogIndex, DEF_MNGOPPANEL_JOG_Y_KEY);
			}
		}

		/** T(+) Slow 이동 */
		if (bTpStatus && !bTnStatus)
		{
			/** 처음 눌리는 것이면 */
			if (m_iPrevJogVal_T != DEF_MNGOPPANEL_POS_KEY)
			{
				m_iPrevJogVal_T = DEF_MNGOPPANEL_POS_KEY;
				m_bPrevDir_T = DEF_MNGOPPANEL_POSITIVE_DIR;
				m_plnkOpPanel->StopJog(m_iJogIndex, DEF_MNGOPPANEL_JOG_T_KEY);
				/** T(+) 방향으로 Slow 이동 실시 */
				iResult = m_plnkOpPanel->MoveJogSlow(m_iJogIndex, DEF_MNGOPPANEL_JOG_T_KEY, DEF_MNGOPPANEL_POSITIVE_DIR);
				if(iResult != ERR_OPPANEL_SUCCESS)
					return iResult;
			}
		}
		/** T(-) Slow 이동 */
		else if (!bTpStatus && bTnStatus)
		{
			/** 처음 눌리는 것이면 */
			if (m_iPrevJogVal_T != DEF_MNGOPPANEL_POS_KEY)
			{
				m_iPrevJogVal_T = DEF_MNGOPPANEL_POS_KEY;
				m_bPrevDir_T = DEF_MNGOPPANEL_NEGATIVE_DIR;
				m_plnkOpPanel->StopJog(m_iJogIndex, DEF_MNGOPPANEL_JOG_T_KEY);
				/** T(-) 방향으로 Slow 이동 실시 */
				iResult = m_plnkOpPanel->MoveJogSlow(m_iJogIndex, DEF_MNGOPPANEL_JOG_T_KEY, DEF_MNGOPPANEL_NEGATIVE_DIR);
				if(iResult != ERR_OPPANEL_SUCCESS)
					return iResult;

			}
		}
		/** T(+/-) Fast 이동 */
		else if (bTpStatus && bTnStatus)
		{
			/** 처음 눌리는 것이면 */
			if (m_iPrevJogVal_T != DEF_MNGOPPANEL_ALL_KEY)
			{
				m_iPrevJogVal_T = DEF_MNGOPPANEL_ALL_KEY;
				m_plnkOpPanel->StopJog(m_iJogIndex, DEF_MNGOPPANEL_JOG_T_KEY);
				/** T(+/) 방향으로 Fast 이동 실시 */
				iResult = m_plnkOpPanel->MoveJogFast(m_iJogIndex, DEF_MNGOPPANEL_JOG_T_KEY, m_bPrevDir_T);
				if(iResult != ERR_OPPANEL_SUCCESS)
					return iResult;
			}
		}
		/** 아무 것도 안 눌렸을 때 */
		else
		{
			/** 처음 안 눌리는 것이면 */
			if (m_iPrevJogVal_T != DEF_MNGOPPANEL_NON_KEY)
			{
				m_iPrevJogVal_T = DEF_MNGOPPANEL_NON_KEY;
				m_plnkOpPanel->StopJog(m_iJogIndex, DEF_MNGOPPANEL_JOG_T_KEY);
			}
		}

		/** Z(+) Slow 이동 */
		if (bZpStatus && !bZnStatus)
		{
			/** 처음 눌리는 것이면 */
			if (m_iPrevJogVal_Z != DEF_MNGOPPANEL_POS_KEY)
			{
				m_iPrevJogVal_Z = DEF_MNGOPPANEL_POS_KEY;
				m_bPrevDir_Z = DEF_MNGOPPANEL_POSITIVE_DIR;
				m_plnkOpPanel->StopJog(m_iJogIndex, DEF_MNGOPPANEL_JOG_Z_KEY);
				/** Z(+) 방향으로 Slow 이동 실시 */
				iResult = m_plnkOpPanel->MoveJogSlow(m_iJogIndex, DEF_MNGOPPANEL_JOG_Z_KEY, DEF_MNGOPPANEL_POSITIVE_DIR);
				if(iResult != ERR_OPPANEL_SUCCESS)
					return iResult;
			}
		}
		/** Z(-) Slow 이동 */
		else if (!bZpStatus && bZnStatus)
		{
			/** 처음 눌리는 것이면 */
			if (m_iPrevJogVal_Z != DEF_MNGOPPANEL_POS_KEY)
			{
				m_iPrevJogVal_Z = DEF_MNGOPPANEL_POS_KEY;
				m_bPrevDir_Z = DEF_MNGOPPANEL_NEGATIVE_DIR;
				m_plnkOpPanel->StopJog(m_iJogIndex, DEF_MNGOPPANEL_JOG_Z_KEY);
				/** Z(-) 방향으로 Slow 이동 실시 */
				iResult = m_plnkOpPanel->MoveJogSlow(m_iJogIndex, DEF_MNGOPPANEL_JOG_Z_KEY, DEF_MNGOPPANEL_NEGATIVE_DIR);
				if(iResult != ERR_OPPANEL_SUCCESS)
					return iResult;
			}
		}
		/** Z(+/-) Fast 이동 */
		else if (bZpStatus && bZnStatus)
		{
			/** 처음 눌리는 것이면 */
			if (m_iPrevJogVal_Z != DEF_MNGOPPANEL_ALL_KEY)
			{
				m_iPrevJogVal_Z = DEF_MNGOPPANEL_ALL_KEY;
				m_plnkOpPanel->StopJog(m_iJogIndex, DEF_MNGOPPANEL_JOG_Z_KEY);
				/** Z(+/) 방향으로 Fast 이동 실시 */
				iResult = m_plnkOpPanel->MoveJogFast(m_iJogIndex, DEF_MNGOPPANEL_JOG_Z_KEY, m_bPrevDir_Z);
				if(iResult != ERR_OPPANEL_SUCCESS)
					return iResult;
			}
		}
		/** 아무 것도 안 눌렸을 때 */
		else
		{
			/** 처음 안 눌리는 것이면 */
			if (m_iPrevJogVal_Z != DEF_MNGOPPANEL_NON_KEY)
			{
				m_iPrevJogVal_Z = DEF_MNGOPPANEL_NON_KEY;
				m_plnkOpPanel->StopJog(m_iJogIndex, DEF_MNGOPPANEL_JOG_Z_KEY);
			}
		}
	}

	/** 항시 Touch Panel 전환 점검 */
	/**  Front Stop Switch가 눌리면 */
	if (DEF_OPPANEL_FRONT_PANEL_ID == m_plnkOpPanel->GetOpPanelSelectSW())
	{
		/** Touch Panel 앞면으로 전환 */
		iResult = m_plnkOpPanel->ChangeOpPanel(DEF_OPPANEL_FRONT_PANEL_ID);
		if (iResult != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
	}
	/**  Back Stop Switch가 눌리면 */
	else if (DEF_OPPANEL_BACK_PANEL_ID == m_plnkOpPanel->GetOpPanelSelectSW())
	{
		/** Touch Panel 뒷면으로 전환 */
		iResult = m_plnkOpPanel->ChangeOpPanel(DEF_OPPANEL_BACK_PANEL_ID);
		if (iResult != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
	}
	//@KKY.130906________________
	else if (DEF_OPPANEL_FRONT_PANEL_ID_PRESS == m_plnkOpPanel->GetOpPanelSelectSW())
	{
		/** Touch Panel 앞면으로 전환 */
		iResult = m_plnkOpPanel->ChangeOpPanel(DEF_OPPANEL_FRONT_PANEL_ID_PRESS);
		if (iResult != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
	}
	/**  Back Stop Switch가 눌리면 */
	else if (DEF_OPPANEL_BACK_PANEL_ID_PRESS == m_plnkOpPanel->GetOpPanelSelectSW())
	{
		/** Touch Panel 뒷면으로 전환 */
		iResult = m_plnkOpPanel->ChangeOpPanel(DEF_OPPANEL_BACK_PANEL_ID_PRESS);
		if (iResult != ERR_MNGOPPANEL_SUCCESS)
			return iResult;
	}
	//@__________________________

	return ERR_MNGOPPANEL_SUCCESS;
}

/**
 * Jog에 사용할 Unit Index를 설정한다.
 *
 * @param	iUnitIndex : (OPTION=-1) Jog에 사용할 Unit Index
 */
void MManageOpPanel::SetJogUnit(int iUnitIndex)
{
	if (iUnitIndex > DEF_JOG_NULL_BASE)
		return;

	if (iUnitIndex != m_iJogIndex)
	{
		m_plnkOpPanel->StopJog(m_iJogIndex);	// Jog Unit이 바뀔 경우 이전 Jog Unit을 정지한다.
	}

	m_iJogIndex = iUnitIndex;
}

/** 
 * 설정된 Jog에 사용할 Unit Index를 읽는다.
 *
 * @return	Error Code : 0=SUCCESS, 그 외=Error
 */
int MManageOpPanel::GetJogUnit(void)
{
	/** Jog로 이동할 Motion에 대한 정보 Index */
	return m_iJogIndex;
}

#ifdef SIMULATION
void MManageOpPanel::SetSimulationStartSW(BOOL bState)
{
	m_bSimulationStartSW = bState;
}

void MManageOpPanel::SetSimulationStopSW(BOOL bState)
{
	m_bSimulationStopSW = bState;
}

void MManageOpPanel::SetSimulationResetSW(BOOL bState)
{
	m_bSimulationResetSW = bState;
}
#endif

// End Of Code
