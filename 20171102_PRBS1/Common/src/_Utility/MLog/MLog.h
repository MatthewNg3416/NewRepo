/* Generated by Together */
/* samsung */
/* 
 * MLog Class
 *
 * Copyright 2004 by Mechatronics Center, Samsung Electronics, Inc.,
 * All rights reserved.
 *
 * This software is the confidential and proprietary information
 * of Smasung Electronics, Inc. ("Confidential Information"). You
 * shall not disclose such Confidential Information and shall use
 * it only in accordance with the terms of the license agreement
 * you entered into with Samsung.
 */

/**
 * MLog.h : This file implements the Log Class.
 *              이 파일은 공통의 MLog Class를 정의한다.
 *
 * @author  Arena99 
 * @version $Revision$
 */

#ifndef	MLOG_H
#define MLOG_H

const int	DEF_MLOG_SUCCESS				= 0;
const int	ERR_MLOG_FILE_OPEN_ERROR		= 1; 
const int	ERR_MLOG_TOO_SHORT_KEEPING_DAYS	= 2;

const BYTE	DEF_MLOG_NONE_LOG_LEVEL			= 0x00;	// Log 안 함
const BYTE	DEF_MLOG_ERROR_LOG_LEVEL		= 0x01;	// Error관련 Log
const BYTE	DEF_MLOG_MONITORING_LOG_LEVEL	= 0x02;	// Monitoring 관련 Log
const BYTE	DEF_MLOG_NORMAL_LOG_LEVEL		= 0x04;	// 정상 동작 관련 Log
const BYTE	DEF_MLOG_TACT_TIME_LOG_LEVEL	= 0x10;
const BYTE	DEF_MLOG_EQ_TACT_TIME_LOG_LEVEL	= 0x20; //170427 JSH

const int	DEF_MLOG_DEFAULT_KEEPING_DAYS	= 30;
const int	DEF_MLOG_NUM_FILES_TOBE_DELETED	= 20;
const int	DEF_MLOG_NUM_VIEW_DISPLAY_LOG	= 100;

typedef	struct tagSLogItem
{
	int		m_iMyOrder;
	CString	m_strDate;
	int		m_iObjectID;
	BYTE	m_ucLevel;
	CString	m_strLogMsg;
	CString	m_strFileName;
	int		m_iLineNumber;
} SLogItem, *pSLogItem;

typedef struct tagSLogViewItem
{
	int			m_iNumLog;
	int			m_iCurrentIndex;
	SLogItem	m_logItemView[DEF_MLOG_NUM_VIEW_DISPLAY_LOG];
} SLogViewItem, *pSLogViewItem;



class MLog
{
private:
	/** Support view data */
	SLogViewItem	*m_pLogView;

	/** ObjectID contained in the component 
	  * Compoonent will be set/get this attribute
	  */
	int m_iObjectID;

	/** Log File Pointer */
	FILE *m_pLogFile;

	/** Log File Path(Directory) 
	  * Component will be set/get this attribute
	  */
	CString m_strLogFilePath;

	/** Log File Path(Directory) 
	  * Component will be set/get this attribute
	  * The name of actual log file is different from this file name.
	  * MLog class will generate the name of actual log file according to current date.
	  */
	CString m_strLogFileName;

	/** Log Level 
	  * Four log levels : no - normal- warning - error
	  * m_ucLogLevel has an bitwise information.
	  */
	BYTE m_ucLogLevel;
	
	/** Keeping days of log files
	  * Required because of the limited hard disk capacity
	  */
	int m_iLogKeepingDays;
	
	CRITICAL_SECTION	m_csWriteControl;

public:
	/** @stereotype constructor */
	MLog();

    /**
     * constructor
	 *
	 * @param	iObjectID		: 정수 값으로 Component가 가지는 Object ID
	 * @param	strFullFileName	: file path 및 file name을 가지는 string
	 * @param	ucLevel			: log level 지정 bitwise 정보
     * @param	iDays			: (OPTION=30) 현재 set되어 있는 log file 저장일
	 * @return  Error Code		: 0 = Success, 그외= Error
     */
	MLog(int iObjectID, CString strFullFileName, BYTE ucLevel, int iDays = DEF_MLOG_DEFAULT_KEEPING_DAYS);


	/** @stereotype destructor */
	~MLog();

    /**
     * Object ID를 set한다.
	 *
	 * @param	iObjectID		: 정수 값으로 Component가 가지는 Object ID
     * @return  Error Code		: 0 = Success, 그외= Error
     */
	int SetObjectID(int iObjectID);

    /**
     * Object ID를 반환한다.
	 *
     * @return  Object ID		: SetObjectID()를 통하여 set된 Object ID를 반환
     */
	int GetObjectID(void);

    /**
     * Log File Path를 set한다.
	 * File Path는 반드시 '\\'(backslash)를 포함해야 한다.
	 *
	 * @param	strPath			: CString type의 File Path
     * @return  Error Code		: 0 = Success, 그외= Error
     */
	int SetLogFilePath(CString strPath);

    /**
     * Log File path를 반환한다.
	 *
     * @return  File Path 		: File path를 반환한다.
     */
	CString GetLogFilePath(void);

    /**
     * Log File 이름를 set한다.
	 * 해당이름은 실제 파일이름과 다르다. 
	 * 실제이름은 날짜 정보를 포함한다.
	 *
	 * @param	strName			: CString type의 File 이름
     * @return  Error Code		: 0 = Success, 그외= Error
     */
	int SetLogFileName(CString strName);

    /**
     * Log File 이름을 반환한다.
	 *
     * @return  File Name 		: File 이름을 반환한다.
     */
	CString GetLogFileName(void);

    /**
     * Log Level을 set한다.
	 * Log Level은 bitwise로 mask된다. 
	 *
	 * @param	ucLevel			: 1 Byte bitwise log mask 정보를 포함한다.
     * @return  Error Code		: 0 = Success, 그외= Error
     */
	int SetLogLevel(BYTE ucLevel);

    /**
     * Log Level을 get한다.
	 * Log Level은 bitwise로 되어있다. 
	 *
     * @return  ucLevel		: 1 Byte bitwise log mask 정보를 포함한다.
     */
	BYTE GetLogLevel(void);

    /**
     * Log file을 저장하고 보관하는 일자를 set한다.
	 *
	 * @param	iDays			: (OPTION=30) log file 저장 일
     * @return  Error Code		: 0 = Success, 그외= Error
     */
	int	SetLogKeepingDays(int iDays = DEF_MLOG_DEFAULT_KEEPING_DAYS);

    /**
     * Log file을 저장하고 보관하는 일자를 get한다.
	 *
     * @return  iDays			: 현재 set되어 있는 log file 저장일
     */
	int GetLogKeepingDays(void);

    /**
     * Log file과 관련된 attribute를 한번에 지정한다.
	 *
	 * @param	iObjectID		: 정수 값으로 Component가 가지는 Object ID
	 * @param	strFullFileName	: file path 및 file name을 가지는 string
	 * @param	ucLevel			: log level 지정 bitwise 정보
     * @param	iDays			: (OPTION=30) 현재 set되어 있는 log file 저장일
	 * @return  Error Code		: 0 = Success, 그외= Error
     */
	int SetLogAttribute(int iObjectID, CString strFullFileName, BYTE ucLevel, int iDays = DEF_MLOG_DEFAULT_KEEPING_DAYS);

    /**
     * Log file과 관련된 attribute를 한번에 얻어온다.
	 *
	 * @param	*piObjectID			: 정수 값으로 Component가 가지는 Object ID
	 * @param	*pstrFullFileName	: file path 및 file name을 가지는 string
	 * @param	*pucLevel			: log level 지정 bitwise 정보
     * @param	*piDays				: 현재 set되어 있는 log file 저장일
     */
	void GetLogAttribute(int *piObjectID, CString& pstrFullFileName, BYTE *pucLevel, int *piDays);

    /**
     * Log file에 log를 기록한다.
	 *
	 * @param	ucLevel			: 저정하고자 하는 log level
	 * @param	strLog			: 기록하고자 하는 log
	 * @param	*pcErrFileName	: log를 기록하고자 호출하는 파일이름
	 * @param	iErrLine		: log를 기록하고자 호출하는 파일 line
	 * @return  Error Code		: 0 = Success, 그외= Error
     */
	int WriteLog(BYTE ucLevel, CString strLog, char *pcErrFileName, int iErrLine);

    /**
     * 오래된 Log file을 삭제한다.
	 *
	 * @return  Error Code		: 0 = Success, 그외= Error
     */
	int DeleteOldLogFiles(void);

	/**
	 * Get latest log items stored in memory	
	 */
	SLogViewItem *GetLogViewItem(void) const;

	/**
	 * Get Last Log item	
	 */
	SLogItem GetLastLogItem(void) const ;

	/**
	  * 현재의 날짜를 스트링으로 리턴한다.
	  *
	  * @return		
	  */
	CString GetCurDate();

	/**
	  * 현재의 시간을 스트링으로 리턴한다.
	  *
	  * @return		
	  */
	CString GetCurTime();

	/**
	  * 현재의 날짜와 시간을 스트링으로 리턴한다.
	  *
	  * @return		
	  */
	CString GetCurDataAndTime();

};

#endif