/* Generated by Together */
/* 
 * Motion Component
 *
 * Copyright 2004 by Mechatronics Center, Samsung Electronics, Inc.,
 * All rights reserved.
 *
 * This software is the confidential and proprietary information
 * of Smasung Electronics, Inc.("Confidential Information"). You
 * shall not disclose such Confidential Information and shall use
 * it only in accordance with the terms of the license agreement
 * you entered into with Samsung.
 */

#include "stdafx.h"
#include "MMotionBoard.h"

#include "common.h"

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif

/**
 * MMotionBoard.cpp : This file implements the class of Motion Board Configuration.
 *			          이 파일은 Motion Board Data를 위한 Class의 실행 코드를 구현한다.
 *
 * @author Yong-Seog Pahn(dragon.pahn@samsung.com)
 * @version $Revision$
 */

SMotionBoard MMotionBoard::m_BoardConfig =
	{DEF_NON_MOTION_BD,
	{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
	{FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE},
	{DEF_PC_INDEXSEL_0, DEF_PC_INDEXSEL_0, DEF_PC_INDEXSEL_0, DEF_PC_INDEXSEL_0,
	DEF_PC_INDEXSEL_0, DEF_PC_INDEXSEL_0, DEF_PC_INDEXSEL_0, DEF_PC_INDEXSEL_0},
	{{DEF_AXIS_NON_ID, DEF_AXIS_NON_ID},
	{DEF_AXIS_NON_ID, DEF_AXIS_NON_ID},
	{DEF_AXIS_NON_ID, DEF_AXIS_NON_ID},
	{DEF_AXIS_NON_ID, DEF_AXIS_NON_ID},
	{DEF_AXIS_NON_ID, DEF_AXIS_NON_ID},
	{DEF_AXIS_NON_ID, DEF_AXIS_NON_ID},
	{DEF_AXIS_NON_ID, DEF_AXIS_NON_ID},
	{DEF_AXIS_NON_ID, DEF_AXIS_NON_ID}}
	};

BOOL MMotionBoard::m_bBoardInitSuccessFlag = FALSE;

BOOL MMotionBoard::m_rgbPC10BoardInitSuccessFlag[DEF_MAX_MOTION_BD] 
	               = {FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE};

BOOL MMotionBoard::m_rgbAxisUseFlag[DEF_MAX_AXIS_NO] =
	{FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE,
	FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE,
	FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE,
	FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE,
	FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE,
	FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE,
	FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE,
	FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE
	};

/**
 * Constructor
 * @stereotype constructor
 */
MMotionBoard::MMotionBoard()
{
}

/**
 * Constructor
 *
 * @stereotype constructor
 */
MMotionBoard::MMotionBoard(SCommonAttribute commonData, SMotionBoard mbdConfig)
:ICommon(commonData)
{
	CString strLogMsg;
	short iResult = ERR_MOTION_SUCCESS;
	iResult = SetBoardConfig(mbdConfig);
}
/**
 * Constructor
 * @stereotype destructor
 */
MMotionBoard::~MMotionBoard()
{
}

/**
 * Motion Board 구성 정보 설정
 *
 * @param	mbdConfig		: Motion Board 구성 정보
 * @return	Error Code		: 0 = SUCCESS
 *							  xx = INVALID MOTION BOARD TYPE(MOTIONLIB)
 *							  xx = INVALID AXIS NUMBER PER MOTION BOARD(MOTIONLIB)
 *							  xx = INVALID MOTION BOARD NUMBER(MOTIONLIB)
 *							  xx = INVALID PC10 INDECSEL NUMBER(MOTIONLIB)
 *							  xx = INVALID AXIS ID(MOTIONLIB)
 *							  xx = INVALID ORIGIN WAIT TIME(<=0.0)(MOTIONLIB)
 */
int MMotionBoard::SetBoardConfig(SMotionBoard mbdConfig)
{
	int i;
	CString strLogMsg;

	/** Motion Board 구성 개수 점검 */
	if ((mbdConfig.iMaxBoardNo < DEF_NON_MOTION_BD) ||(mbdConfig.iMaxBoardNo > DEF_MAX_MOTION_BD))
		return generateErrorCode(107096);	// ERR_MLIB_INVALID_MOTION_BOARD_NUMBER

	/** 구성 Board 점검 */
	for (int i = 0; i < mbdConfig.iMaxBoardNo; i++)
	{
		/** PC10 Option Board IndexSel 번호 점검 */
		if ((mbdConfig.rgiPC10IndexSel[i] < DEF_PC_INDEXSEL_0) 
			||(mbdConfig.rgiPC10IndexSel[i] > DEF_PC_INDEXSEL_2))
			return generateErrorCode(107087);	// ERR_MLIB_INVALID_POSITION_COMPARE_INDEXSEL_NUMBER

		/** PC10 Option Board IndexSel 번호 점검 */
		if (mbdConfig.rgiPC10IndexSel[i] > DEF_PC_INDEXSEL_0)
		{
			/** PC10 Option Board 1번째 축 ID 점검 */
			if ((mbdConfig.rgiPC10Axis[i][0] < DEF_AXIS_NON_ID) 
				||(mbdConfig.rgiPC10Axis[i][0] > DEF_MAX_AXIS_NO))
				return generateErrorCode(107109);	//	ERR_MLIB_INVALID_AXIS_ID

			/** PC10 Option Board IndexSel 번호 점검 */
			if (mbdConfig.rgiPC10IndexSel[i] == DEF_PC_INDEXSEL_2)
			{
				/** PC10 Option Board 2번째 축 ID 점검 */
				if ((mbdConfig.rgiPC10Axis[i][1] < DEF_AXIS_NON_ID) 
					||(mbdConfig.rgiPC10Axis[i][1] > DEF_MAX_AXIS_NO))
					return generateErrorCode(107109);	// ERR_MLIB_INVALID_AXIS_ID
			}
		}
	} // Next i

	/** Motion Board 구성 개수 설정 */
	m_BoardConfig.iMaxBoardNo = mbdConfig.iMaxBoardNo;

	/** 원점복귀 대기 시간 설정 */
	//m_BoardConfig.dOriginWaitTime = mbdConfig.dOriginWaitTime;

	/** 구성 Board 설정 */
	for (i = 0; i < mbdConfig.iMaxBoardNo; i++)
	{
		/** DPRAM Address 설정 */
		m_BoardConfig.rglAddress[i] = mbdConfig.rglAddress[i];
		/** Auto CP Option 설정 */
		m_BoardConfig.rgbAutoCP[i] = mbdConfig.rgbAutoCP[i];

		/** PC10 Option Board IndexSel 번호 설정 */
		m_BoardConfig.rgiPC10IndexSel[i] = mbdConfig.rgiPC10IndexSel[i];
		/** PC10 Option Board 1번째 축 ID 설정 */
		m_BoardConfig.rgiPC10Axis[i][0] = mbdConfig.rgiPC10Axis[i][0];
		/** PC10 Option Board 2번째 축 ID 설정 */
		m_BoardConfig.rgiPC10Axis[i][1] = mbdConfig.rgiPC10Axis[i][1];
	} // Next i

	/** 미구성 Board 설정 */
	for (i; i < DEF_MAX_MOTION_BD; i++)
	{
		m_BoardConfig.rglAddress[i] = 0x00;
		m_BoardConfig.rgbAutoCP[i] = FALSE;
		m_BoardConfig.rgiPC10IndexSel[i] = DEF_PC_INDEXSEL_0;
		m_BoardConfig.rgiPC10Axis[i][0] = DEF_AXIS_NON_ID;
		m_BoardConfig.rgiPC10Axis[i][1] = DEF_AXIS_NON_ID;
	} // Next i

	return ERR_MOTION_SUCCESS;
}
/**
 * Motion Board 구성 정보 읽기
 *
 * @param	* pmbdConfig	: Motion Board 구성 정보
 * @return	Error Code		: 0 = SUCCESS
 *							  xx = INVALID MOTION BOARD TYPE(MOTIONLIB)
 *							  xx = INVALID AXIS NUMBER PER MOTION BOARD(MOTIONLIB)
 *							  xx = INVALID MOTION BOARD NUMBER(MOTIONLIB)
 *							  xx = INVALID PC10 INDECSEL NUMBER(MOTIONLIB)
 *							  xx = INVALID AXIS ID(MOTIONLIB)
 *							  xx = INVALID ORIGIN WAIT TIME(<=0.0)(MOTIONLIB)
 */
int MMotionBoard::GetBoardConfig(SMotionBoard * pmbdConfig)
{
	int i;
	CString strLogMsg;

	/** Motion Board 구성 개수 점검 */
	if ((m_BoardConfig.iMaxBoardNo < DEF_NON_MOTION_BD) 
		||(m_BoardConfig.iMaxBoardNo > DEF_MAX_MOTION_BD))
		return generateErrorCode(107096);	// ERR_MLIB_INVALID_MOTION_BOARD_NUMBER

	/** 인수 포인터 오류 */
	if (pmbdConfig == NULL)
		return generateErrorCode(107090);	// ERR_MLIB_INVALID_POINTER

	/** 구성 Board 점검 */
	for (int i = 0; i < m_BoardConfig.iMaxBoardNo; i++)
	{
		/** PC10 Option Board IndexSel 번호 점검 */
		if ((m_BoardConfig.rgiPC10IndexSel[i] < DEF_PC_INDEXSEL_0) 
			||(m_BoardConfig.rgiPC10IndexSel[i] > DEF_PC_INDEXSEL_2))
			return generateErrorCode(107087);	// ERR_MLIB_INVALID_POSITION_COMPARE_INDEXSEL_NUMBER

		/** PC10 Option Board IndexSel 번호 점검 */
		if (m_BoardConfig.rgiPC10IndexSel[i] > DEF_PC_INDEXSEL_0)
		{
			/** PC10 Option Board 1번째 축 ID 점검 */
			if ((m_BoardConfig.rgiPC10Axis[i][0] < DEF_AXIS_NON_ID) 
				||(m_BoardConfig.rgiPC10Axis[i][0] > DEF_MAX_AXIS_NO))
				return generateErrorCode(107109);	// ERR_MLIB_INVALID_AXIS_ID

			/** PC10 Option Board IndexSel 번호 점검 */
			if (m_BoardConfig.rgiPC10IndexSel[i] == DEF_PC_INDEXSEL_2)
			{
				/** PC10 Option Board 2번째 축 ID 점검 */
				if ((m_BoardConfig.rgiPC10Axis[i][1] < DEF_AXIS_NON_ID) 
					||(m_BoardConfig.rgiPC10Axis[i][1] > DEF_MAX_AXIS_NO))
					return generateErrorCode(107109);	// ERR_MLIB_INVALID_AXIS_ID
			}
		}
	} // Next i

	/** Motion Board 구성 개수 설정 */
	pmbdConfig->iMaxBoardNo = m_BoardConfig.iMaxBoardNo;

	/** 원점복귀 대기 시간 설정 */
	//pmbdConfig->dOriginWaitTime = m_BoardConfig.dOriginWaitTime;

	/** 구성 Board 설정 */
	for ( i = 0; i < m_BoardConfig.iMaxBoardNo; i++)
	{
		/** Motion board DPRAM Address */
		pmbdConfig->rglAddress[i] = m_BoardConfig.rglAddress[i];
		/** Auto CP Option 설정 */
		pmbdConfig->rgbAutoCP[i] = m_BoardConfig.rgbAutoCP[i];

		/** PC10 Option Board IndexSel 번호 설정 */
		pmbdConfig->rgiPC10IndexSel[i] = m_BoardConfig.rgiPC10IndexSel[i];
		/** PC10 Option Board 1번째 축 ID 설정 */
		pmbdConfig->rgiPC10Axis[i][0] = m_BoardConfig.rgiPC10Axis[i][0];
		/** PC10 Option Board 2번째 축 ID 설정 */
		pmbdConfig->rgiPC10Axis[i][1] = m_BoardConfig.rgiPC10Axis[i][1];
	} // Next i

	/** 미구성 Board 설정 */
	for (i; i < DEF_MAX_MOTION_BD; i++)
	{
		pmbdConfig->rglAddress[i] = 0x00;
		pmbdConfig->rgbAutoCP[i] = FALSE;
		pmbdConfig->rgiPC10IndexSel[i] = DEF_PC_INDEXSEL_0;
		pmbdConfig->rgiPC10Axis[i][0] = DEF_AXIS_NON_ID;
		pmbdConfig->rgiPC10Axis[i][1] = DEF_AXIS_NON_ID;
	} // Next i

	return ERR_MOTION_SUCCESS;
}
/**
 * Motion Board 초기화 상태 읽기
 *
 * @return	초기화 상태		: TRUE = 초기화했음, FALSE = 초기화안했음
 */
BOOL MMotionBoard::GetBoardInitSuccess(void)
{
	return m_bBoardInitSuccessFlag;
}
/**
 * Motion Board 초기화 상태 설정하기
 *
 * @param	bSet			: Flag 설정값
 * @return	초기화 상태		: TRUE = 초기화했음, FALSE = 초기화안했음
 */
BOOL MMotionBoard::SetBoardInitSuccess(BOOL bSet)
{
	m_bBoardInitSuccessFlag = bSet;				// Motion Board 초기화 Flag 설정

	return m_bBoardInitSuccessFlag;
}
/**
 * PC10 Option Board 초기화 상태 읽기
 *
 * @param	siBdID			: Board ID(0 ~ 7)
 * @return	초기화 상태		: TRUE = 초기화했음, FALSE = 초기화안했음
 */
BOOL MMotionBoard::GetPC10BoardInitSuccess(short siBdID)
{
	/** Board 개수 범위 오류 */
	if ((siBdID < DEF_NON_MOTION_BD) ||(siBdID > m_BoardConfig.iMaxBoardNo))
		return FALSE;

	return m_rgbPC10BoardInitSuccessFlag[siBdID];
}
/**
 * PC10 Option 초기화 상태 설정하기
 *
 * @param	siBdID			: Board ID(0 ~ 7)
 * @param	bSet			: Flag 설정값
 * @return	초기화 상태		: TRUE = 초기화했음, FALSE = 초기화안했음
 */
BOOL MMotionBoard::SetPC10BoardInitSuccess(short siBdID, BOOL bSet)
{
	/** Board 개수 범위 오류 */
	if ((siBdID < DEF_NON_MOTION_BD) ||(siBdID > m_BoardConfig.iMaxBoardNo))
		return FALSE;

	m_rgbPC10BoardInitSuccessFlag[siBdID] = bSet;				// Motion Board 초기화 Flag 설정

	return m_rgbPC10BoardInitSuccessFlag[siBdID];
}
/**
 * 축 사용 여부 설정
 *
 * @param	siAxisID		: 축 ID(0 ~ 63)
 * @param	bState			: 사용 여부(TRUE=사용, FALSE=미사용)
 * @return	Error Code		: 0 = SUCCESS
 *							  xx = USED AXIS ID(MOTIONLIB)
 */
int MMotionBoard::SetUseAxis(short siAxisID, BOOL bState)
{
	CString strLogMsg;

	/** 축 ID 범위 오류 */
	if ((siAxisID < DEF_AXIS_NON_NO) 
		||(siAxisID >(m_BoardConfig.iMaxBoardNo * DEF_AXIS_NO_PER_BRD - 1)))
		return generateErrorCode(107109);	// ERR_MLIB_INVALID_AXIS_ID

	/** 축 사용 여부 확인 */
	if (m_rgbAxisUseFlag[siAxisID] == TRUE)
		return generateErrorCode(107070);	// ERR_MLIB_USED_AXIS_ID
	else
		m_rgbAxisUseFlag[siAxisID] = TRUE;

	return ERR_MOTION_SUCCESS;
}
/**
 * 축 사용 여부 읽기
 *
 * @param	siAxisID		: 축 ID(0 ~ 63)
 * @param	*pbState		: 사용 여부(TRUE=사용, FALSE=미사용)
 * @return	Error Code		: 0 = SUCCESS
 *							  xx = USED AXIS ID(MOTIONLIB)
 *							  xx = INVALID POINTER(MOTIONLIB)
 */
int MMotionBoard::GetUseAxis(short siAxisID, BOOL *pbState)
{
	CString strLogMsg;
	/** 축 ID 범위 오류 */
	if ((siAxisID < DEF_AXIS_NON_NO) 
		||(siAxisID >(m_BoardConfig.iMaxBoardNo * DEF_AXIS_NO_PER_BRD - 1)))
		return generateErrorCode(107109);	// ERR_MLIB_INVALID_AXIS_ID

	/** 인수 포인터 오류 */
	if (pbState == NULL)
		return generateErrorCode(107090);	// ERR_MLIB_INVALID_POINTER

	/** 축 사용 여부 확인 */
	*pbState = m_rgbAxisUseFlag[siAxisID];

	return ERR_MOTION_SUCCESS;
}
/**
 * 구성된 Board 개수 읽기
 *
 * @param	*psiBdNum		: Board 구성 개수
 * @param	*plAddress		:(OPTION=NULL) DPRAM Address
 * @return	Error Code		: 0 = SUCCESS
 *							  xx = INVALID MOTION BOARD NUMBER(MOTIONLIB)
 *							  xx = INVALID POINTER(MOTIONLIB)
 */
int MMotionBoard::GetBoardNum(short *psiBdNum, long *plAddress)
{
	CString strLogMsg;

	/** Motion Board 구성 개수 점검 */
	if ((m_BoardConfig.iMaxBoardNo < DEF_NON_MOTION_BD) 
		||(m_BoardConfig.iMaxBoardNo > DEF_MAX_MOTION_BD))
	{
		return generateErrorCode(107096);	// ERR_MLIB_INVALID_MOTION_BOARD_NUMBER
	}

	/** 인수 포인터 오류 */
	if (psiBdNum == NULL)
		return generateErrorCode(107090);	// ERR_MLIB_INVALID_POINTER

	*psiBdNum = m_BoardConfig.iMaxBoardNo;

	/** DPRAM Address 읽기 */
	if (plAddress != NULL)
	{
		for (int i = 0; i < *psiBdNum; i++)
			plAddress[i] = m_BoardConfig.rglAddress[i];
	}

	return ERR_MOTION_SUCCESS;
}
/**
 * Board 개수, DPRAM Address 설정하기
 *
 * @param	siBdNum			: Board 구성 개수
 * @param	*plAddress		: DPRAM Address
 * @return	Error Code		: 0 = SUCCESS
 *							  xx = INVALID MOTION BOARD NUMBER(MOTIONLIB)
 *							  xx = INVALID POINTER(MOTIONLIB)
 */
int MMotionBoard::SetBoardNum(short siBdNum, long *plAddress)
{
	CString strLogMsg;

	/** Board 개수 범위 오류 */
	if ((siBdNum < DEF_NON_MOTION_BD) ||(siBdNum > DEF_MAX_MOTION_BD))
		return generateErrorCode(107096);	// ERR_MLIB_INVALID_MOTION_BOARD_NUMBER

	m_BoardConfig.iMaxBoardNo = siBdNum;

	/** Board 구성 설정 */
	if (siBdNum != DEF_NON_MOTION_BD)
	{
		/** 인수 포인터 오류 */
		if (plAddress == NULL)
			return generateErrorCode(107090);	// ERR_MLIB_INVALID_POINTER

		/** DPRAM Address 설정 */
		for (int i = 0; i < siBdNum; i++)
			m_BoardConfig.rglAddress[i] = plAddress[i];
	}
	else
	{
		/** DPRAM Address 설정 */
		for (int i = 0; i < DEF_MAX_MOTION_BD; i++)
			m_BoardConfig.rglAddress[i] = 0x00;
	}

	return ERR_MOTION_SUCCESS;
}

// End Of Code