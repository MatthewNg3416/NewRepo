/* Generated by Together */

#ifndef CIFUSER_API_H
#define CIFUSER_API_H

/** @library
 * @stereotype Library*/
/* This is a mirror header file. Please, refer CIFUSER.h*/
class CIFUSER_API {
   /**
    * Checks if the device driver is available and opens a link to it.
    * @param usDevNumber : Always 0
    * @return DRV_NO_ERROR if No error
    */
    short APIENTRY DevOpenDriver        ( unsigned short usDevNumber);

   /**
    * Closes an open link to the device driver
    * @param usDevNumber : Always 0
    * @return DRV_NO_ERROR if No error
    */
    short APIENTRY DevCloseDriver       ( unsigned short usDevNumber);

   /**
    * Read gloal board information
    * @param usDevNumber : Always 0
    * @param usSize : Size of the users data buffer and length of data to be read
    * @param pvData : Pointer to the users data buffer
    * @return DRV_NO_ERROR if No error
    */
    short APIENTRY DevGetBoardInfo      ( unsigned short usDevNumber,
                                      unsigned short usSize,
                                      void           *pvData);

/**
 * Link an application to a board
 * @param usDevNumber : Board number (0..3)
 * @param pDevAddress : Pointer to the physical board address
 * @return DRV_NO_ERROR if No error
 */
short APIENTRY DevInitBoard         ( unsigned short usDevNumber,
                                      void           *pDevAddress);

/**
 * Closes a link to a board
 * @param usDevNumber : Board number (0..3)
 * @return DRV_NO_ERROR if No error
 */
short APIENTRY DevExitBoard         ( unsigned short usDevNumber);

/**
 * Reset a board
 * @param usDevNumber : Board number (0..3)
 * @param usMode : 2 = COLDSTART (new initializing), 3 = WARMSTART (initializing with parameters), 4 = BOOTSTART (switches the board into bootstrap loader mode. COM modules uses this mode to store user parameters)
 * @param ulTimeout : 3 ~ 10sec for COLDSTART and 2 ~ 8sec for WARMSTART
 * @return DRV_NO_ERROR if No error
 */
short APIENTRY DevReset             ( unsigned short usDevNumber,
                                      unsigned short usMode,
                                      unsigned long  ulTimeout);

/**
 * Read all task states from a board
 * @param usDevNumber : Board number (0..3)
 * @param usDevNumber : Number of the state area (1,2)
 * @param usSIze : Size of the users data buffer (maximum length to be read)
 * @param pvData : Pointer to the users data buffer
 * @return DRV_NO_ERROR if No error
 */
short APIENTRY DevGetTaskState      ( unsigned short usDevNumber,
                                      unsigned short usNumber,
                                      unsigned short usSize,
                                      void           *pvData);

/**
 * Read the various information form a board
 * @param usDevNumber : Board number (0..3)
 * @param usinfoArea : Defines which area to be read (GET_DEIVER_INFOR, GET_VERSION_INFO, GET_FIRMWARE_INFO, GET_TASK_INFO, GET_RCS_INFO, GET_DEV_INFO, GET_IO_INFO, GET_IO_SEND_DATA)
 * @param usSIze : Size of the users data buffer and Number of byte to read
 * @param pvData : Pointer to the users data buffer
 * @return DRV_NO_ERROR if No error
 */
short APIENTRY DevGetInfo           ( unsigned short usDevNumber,
                                      unsigned short usFunction,
                                      unsigned short usSize,
                                      void           *pvData);

/**
 * Put/Get IO data from/to a board
 * @param usDevNumber : Board number (0..3)
 * @param usSendOffset : Byte offset in the send IO data area of the communication board
 * @param usSendSize : Length of the send IO data
 * @param pvSendData : Pointer to the user send data buffer
 * @param usReceiveOffset : Byte offset in the receive IO data area of the communication board
 * @param usReceiveSize : Length of the send IO data
 * @param pvReceiveData : Pointer to the user read data buffer
 * ulTimeout : timeout in milliseconds (0 = no timeout)
 * @return DRV_NO_ERROR if No error
 */
short APIENTRY DevExchangeIO        ( unsigned short usDevNumber,
                                      unsigned short usSendOffset,
                                      unsigned short usSendSize,
                                      void           *pvSendData,
                                      unsigned short usReceiveOffset,
                                      unsigned short usReceiveSize,
                                      void           *pvReceiveData,
                                      unsigned long  ulTimeout);

/**
 * Set/Clear the information bit for host is running
 * @param usDevNumber : Board number (0..3)
 * @param usMode : Function of the watchdog (HOST_NOT_READY, HOST_READY)
 * @param ulTimeout : timeout in milliseconds (0 = notimeout)
 * @return DRV_NO_ERROR if No error
 */
short APIENTRY DevSetHostState      ( unsigned short usDevNumber,
                                      unsigned short usMode,
                                      unsigned long  ulTimeout);

/**
 * Put/Get IO data from/to a COM module
 * @param usDevNumber : Board number (0..3)
 * @param usMode : Data transfer mode (0..4)
 * @param usSendOffset : Byte offset in the send IO data area of the communication board
 * @param usSendSize : Length of the send IO data
 * @param pvSendData : Pointer to the user send data buffer
 * @param usReceiveOffset : Byte offset in the receive IO data area of the communication board
 * @param usReceiveSize : Length of the send IO data
 * @param pvReceiveData : Pointer to the user read data buffer
 * ulTimeout : timeout in milliseconds (0 = no timeout)
 * @return DRV_NO_ERROR if No error
 */
short APIENTRY DevExchangeIOEx      ( unsigned short usDevNumber,
                                      unsigned short usMode,
                                      unsigned short usSendOffset,
                                      unsigned short usSendSize,
                                      void           *pvSendData,
                                      unsigned short usReceiveOffset,
                                      unsigned short usReceiveSize,
                                      void           *pvReceiveData,
                                      unsigned long  ulTimeout);

/**
 * Put/Get IO data from/to a board including state information
 * @param usDevNumber : Board number (0..3)
 * @param usSendOffset : Byte offset in the send IO data area of the communication board
 * @param usSendSize : Length of the send IO data
 * @param pvSendData : Pointer to the user send data buffer
 * @param usReceiveOffset : Byte offset in the receive IO data area of the communication board
 * @param usReceiveSize : Length of the send IO data
 * @param pvReceiveData : Pointer to the user read data buffer
 * @param ptComState : Pointer to the user COMSTATE buffer
 * ulTimeout : timeout in milliseconds (0 = no timeout)
 * @return DRV_NO_ERROR if No error
 */
short APIENTRY DevExchangeIOErr     ( unsigned short usDevNumber,
                                      unsigned short usSendOffset,
                                      unsigned short usSendSize,
                                      void           *pvSendData,
                                      unsigned short usReceiveOffset,
                                      unsigned short usReceiveSize,
                                      void           *pvReceiveData,
                                      COMSTATE       *ptState,
                                      unsigned long  ulTimeout);
};
#endif //CIFUSER_API_H
